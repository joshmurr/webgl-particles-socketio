!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=60)}([function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(o=r))}),e.splice(o,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(26)(e);const{formatters:o}=t.exports;o.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(13))},function(t,e,n){var r,o=n(40),i=n(19),s=n(42),a=n(43),c=n(44);"undefined"!=typeof ArrayBuffer&&(r=n(45));var u="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),f="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),h=u||f;e.protocol=3;var p=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},l=o(p),d={type:"error",data:"parser error"},y=n(46);function g(t,e,n){for(var r=new Array(t.length),o=a(t.length,n),i=function(t,n,o){e(n,(function(e,n){r[t]=n,o(e,r)}))},s=0;s<t.length;s++)i(s,t[s],o)}e.encodePacket=function(t,n,r,o){"function"==typeof n&&(o=n,n=!1),"function"==typeof r&&(o=r,r=null);var i=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&i instanceof ArrayBuffer)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=p[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}(t,n,o);if(void 0!==y&&i instanceof y)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(h)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){e.encodePacket({type:t.type,data:o.result},n,!0,r)},o.readAsArrayBuffer(t.data)}(t,n,r);var o=new Uint8Array(1);o[0]=p[t.type];var i=new y([o.buffer,t.data]);return r(i)}(t,n,o);if(i&&i.base64)return function(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}(t,o);var s=p[t.type];return void 0!==t.data&&(s+=r?c.encode(String(t.data),{strict:!1}):String(t.data)),o(""+s)},e.encodeBase64Packet=function(t,n){var r,o="b"+e.packets[t.type];if(void 0!==y&&t.data instanceof y){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];n(o+t)},i.readAsDataURL(t.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),c=0;c<s.length;c++)a[c]=s[c];r=String.fromCharCode.apply(null,a)}return o+=btoa(r),n(o)},e.decodePacket=function(t,n,r){if(void 0===t)return d;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&!1===(t=function(t){try{t=c.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return d;var o=t.charAt(0);return Number(o)==o&&l[o]?t.length>1?{type:l[o],data:t.substring(1)}:{type:l[o]}:d}o=new Uint8Array(t)[0];var i=s(t,1);return y&&"blob"===n&&(i=new y([i])),{type:l[o],data:i}},e.decodeBase64Packet=function(t,e){var n=l[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var o=r.decode(t.substr(1));return"blob"===e&&y&&(o=new y([o])),{type:n,data:o}},e.encodePayload=function(t,n,r){"function"==typeof n&&(r=n,n=null);var o=i(t);if(n&&o)return y&&!h?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r);if(!t.length)return r("0:");g(t,(function(t,r){e.encodePacket(t,!!o&&n,!1,(function(t){r(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return r(e.join(""))}))},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===t)return r(d,0,1);for(var i,s,a="",c=0,u=t.length;c<u;c++){var f=t.charAt(c);if(":"===f){if(""===a||a!=(i=Number(a)))return r(d,0,1);if(a!=(s=t.substr(c+1,i)).length)return r(d,0,1);if(s.length){if(o=e.decodePacket(s,n,!1),d.type===o.type&&d.data===o.data)return r(d,0,1);if(!1===r(o,c+i,u))return}c+=i,a=""}else a+=f}return""!==a?r(d,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));g(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){return n(null,t)}))}),(function(t,e){var r=e.reduce((function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2}),0),o=new Uint8Array(r),i=0;return e.forEach((function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}o[i++]=e?0:1;var a=n.byteLength.toString();for(s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]})),n(o.buffer)}))},e.encodePayloadAsBlob=function(t,n){g(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,e[0]=0}var i=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,y){var a=new y([e.buffer,s.buffer,t]);n(null,a)}}))}),(function(t,e){return n(new y(e))}))},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var o=t,i=[];o.byteLength>0;){for(var a=new Uint8Array(o),c=0===a[0],u="",f=1;255!==a[f];f++){if(u.length>310)return r(d,0,1);u+=a[f]}o=s(o,2+u.length),u=parseInt(u);var h=s(o,0,u);if(c)try{h=String.fromCharCode.apply(null,new Uint8Array(h))}catch(t){var p=new Uint8Array(h);h="";for(f=0;f<p.length;f++)h+=String.fromCharCode(p[f])}i.push(h),o=s(o,u)}var l=i.length;i.forEach((function(t,o){r(e.decodePacket(t,n,!0),o,l)}))}},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){var r=n(25),o=n(5),i=n(16),s=n(0)("socket.io-client");t.exports=e=c;var a=e.managers={};function c(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o=r(t),c=o.source,u=o.id,f=o.path,h=a[u]&&f in a[u].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||h?(s("ignoring socket cache for %s",c),n=i(c,e)):(a[u]||(s("new io instance for %s",c),a[u]=i(c,e)),n=a[u]),o.query&&!e.query&&(e.query=o.query),n.socket(o.path,e)}e.protocol=o.protocol,e.connect=c,e.Manager=n(16),e.Socket=n(22)},function(t,e,n){var r=n(28)("socket.io-parser"),o=n(6),i=n(31),s=n(14),a=n(15);function c(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=c,e.Decoder=h;var u=e.ERROR+'"encode error"';function f(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var o=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===o)return u;n+=o}return r("encoded %j as %s",t,n),n}function h(){this.reconstructor=null}function p(t){this.reconPack=t,this.buffers=[]}function l(t){return{type:e.ERROR,data:"parser error: "+t}}c.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){i.removeBlobs(t,(function(t){var n=i.deconstructPacket(t),r=f(n.packet),o=n.buffers;o.unshift(r),e(o)}))}(t,n):n([f(t)])},o(h.prototype),h.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,o={type:Number(t.charAt(0))};if(null==e.types[o.type])return l("unknown packet type "+o.type);if(e.BINARY_EVENT===o.type||e.BINARY_ACK===o.type){for(var i="";"-"!==t.charAt(++n)&&(i+=t.charAt(n),n!=t.length););if(i!=Number(i)||"-"!==t.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===t.charAt(n+1))for(o.nsp="";++n;){if(","===(c=t.charAt(n)))break;if(o.nsp+=c,n===t.length)break}else o.nsp="/";var a=t.charAt(n+1);if(""!==a&&Number(a)==a){for(o.id="";++n;){var c;if(null==(c=t.charAt(n))||Number(c)!=c){--n;break}if(o.id+=t.charAt(n),n===t.length)break}o.id=Number(o.id)}if(t.charAt(++n)){var u=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n));if(!(!1!==u&&(o.type===e.ERROR||s(u))))return l("invalid payload");o.data=u}return r("decoded %s as %j",t,o),o}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},h.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<r.length;o++)if((n=r[o])===e||n.fn===e){r.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(33),o=n(34),i=n(35);function s(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=c.prototype:(null===t&&(t=new c(e)),t.length=e),t}function c(t,e,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return u(this,t,e,n)}function u(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);c.TYPED_ARRAY_SUPPORT?(t=e).__proto__=c.prototype:t=p(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),o=(t=a(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(c.isBuffer(e)){var n=0|l(e.length);return 0===(t=a(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):p(t,e);if("Buffer"===e.type&&i(e.data))return p(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(f(e),t=a(t,e<0?0:0|l(e)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function p(t,e){var n=e.length<0?0:0|l(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function l(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(c.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(t).length;default:if(r)return j(t).length;e=(""+e).toLowerCase(),r=!0}}function y(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return B(this,e,n);case"utf8":case"utf-8":return R(this,e,n);case"ascii":return k(this,e,n);case"latin1":case"binary":return x(this,e,n);case"base64":return T(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function m(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=c.from(e,r)),c.isBuffer(e))return 0===e.length?-1:v(t,e,n,r,o);if("number"==typeof e)return e&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):v(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(t,e,n,r,o){var i,s=1,a=t.length,c=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var f=-1;for(i=n;i<a;i++)if(u(t,i)===u(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===c)return f*s}else-1!==f&&(i-=i-f),f=-1}else for(n+c>a&&(n=a-c),i=n;i>=0;i--){for(var h=!0,p=0;p<c;p++)if(u(t,i+p)!==u(e,p)){h=!1;break}if(h)return i}return-1}function b(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function w(t,e,n,r){return Y(j(e,t.length-n),t,n,r)}function _(t,e,n,r){return Y(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return _(t,e,n,r)}function A(t,e,n,r){return Y(q(e),t,n,r)}function E(t,e,n,r){return Y(function(t,e){for(var n,r,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function T(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function R(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,s,a,c,u=t[o],f=null,h=u>239?4:u>223?3:u>191?2:1;if(o+h<=n)switch(h){case 1:u<128&&(f=u);break;case 2:128==(192&(i=t[o+1]))&&(c=(31&u)<<6|63&i)>127&&(f=c);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(c=(15&u)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(f=c)}null===f?(f=65533,h=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),o+=h}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=c,e.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},e.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),c.poolSize=8192,c._augment=function(t){return t.__proto__=c.prototype,t},c.from=function(t,e,n){return u(null,t,e,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(t,e,n){return function(t,e,n,r){return f(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},c.allocUnsafe=function(t){return h(null,t)},c.allocUnsafeSlow=function(t){return h(null,t)},c.isBuffer=function(t){return!(null==t||!t._isBuffer)},c.compare=function(t,e){if(!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=c.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var s=t[n];if(!c.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},c.byteLength=d,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},c.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?R(this,0,t):y.apply(this,arguments)},c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},c.prototype.compare=function(t,e,n,r,o){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(i,s),u=this.slice(r,o),f=t.slice(e,n),h=0;h<a;++h)if(u[h]!==f[h]){i=u[h],s=f[h];break}return i<s?-1:s<i?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return m(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return m(this,t,e,n,!1)},c.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return A(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function k(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function x(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function B(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=M(t[i]);return o}function S(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function F(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function P(t,e,n,r,o,i){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function U(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function L(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function D(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function I(t,e,n,r,i){return i||D(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function O(t,e,n,r,i){return i||D(t,0,n,8),o.write(t,e,n,r,52,8),n+8}c.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=c.prototype;else{var o=e-t;n=new c(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},c.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},c.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},c.prototype.readUInt8=function(t,e){return e||F(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return e||F(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return e||F(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return e||F(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return e||F(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},c.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},c.prototype.readInt8=function(t,e){return e||F(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){e||F(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){e||F(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return e||F(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return e||F(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return e||F(t,4,this.length),o.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return e||F(t,4,this.length),o.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return e||F(t,8,this.length),o.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return e||F(t,8,this.length),o.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||P(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},c.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||P(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},c.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,1,255,0),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},c.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);P(this,t,e,n,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<n&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},c.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);P(this,t,e,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,1,127,-128),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},c.prototype.writeFloatLE=function(t,e,n){return I(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return I(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return O(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return O(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},c.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var s=c.isBuffer(t)?t:j(new c(t,r).toString()),a=s.length;for(i=0;i<n-e;++i)this[i+e]=s[i%a]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function M(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function q(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Y(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(32))},function(t,e,n){var r=n(38),o=n(9);t.exports=function(t){var e=t.xdomain,n=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&i)return new XDomainRequest}catch(t){}if(!e)try{return new(o[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e){t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},function(t,e,n){var r=n(1),o=n(11);function i(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=i,o(i.prototype),i.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(t){var e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)},i.prototype.onPacket=function(t){this.emit("packet",t)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<r.length;o++)if((n=r[o])===e||n.fn===e){r.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");-1!=o&&-1!=i&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=n.exec(t||""),a={},c=14;c--;)a[r[c]]=s[c]||"";return-1!=o&&-1!=i&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var c,u=[],f=!1,h=-1;function p(){f&&c&&(f=!1,c.length?u=c.concat(u):h=-1,u.length&&l())}function l(){if(!f){var t=a(p);f=!0;for(var e=u.length;e;){for(c=u,u=[];++h<e;)c&&c[h].run();h=-1,e=u.length}c=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new d(t,e)),1!==u.length||f||a(l)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||r&&(t instanceof ArrayBuffer||function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,r="function"==typeof ArrayBuffer}).call(this,n(7).Buffer)},function(t,e,n){var r=n(36),o=n(22),i=n(6),s=n(5),a=n(23),c=n(24),u=n(0)("socket.io-client:manager"),f=n(21),h=n(51),p=Object.prototype.hasOwnProperty;function l(t,e){if(!(this instanceof l))return new l(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=l,l.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)p.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},l.prototype.updateSocketIds=function(){for(var t in this.nsps)p.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},l.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},i(l.prototype),l.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},l.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},l.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},l.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},l.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},l.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},l.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},l.prototype.open=l.prototype.connect=function(t,e){if(u("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=a(n,"open",(function(){o.onopen(),t&&t()})),s=a(n,"error",(function(e){if(u("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else o.maybeReconnectOnOpen()}));if(!1!==this._timeout){var c=this._timeout;u("connect attempt will timeout after %d",c);var f=setTimeout((function(){u("connect attempt timed out after %d",c),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",c)}),c);this.subs.push({destroy:function(){clearTimeout(f)}})}return this.subs.push(i),this.subs.push(s),this},l.prototype.onopen=function(){u("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",c(this,"ondata"))),this.subs.push(a(t,"ping",c(this,"onping"))),this.subs.push(a(t,"pong",c(this,"onpong"))),this.subs.push(a(t,"error",c(this,"onerror"))),this.subs.push(a(t,"close",c(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",c(this,"ondecoded")))},l.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},l.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},l.prototype.ondata=function(t){this.decoder.add(t)},l.prototype.ondecoded=function(t){this.emit("packet",t)},l.prototype.onerror=function(t){u("error",t),this.emitAll("error",t)},l.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new o(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",i),n.on("connect",(function(){n.id=r.generateId(t)})),this.autoConnect&&i()}function i(){~f(r.connecting,n)||r.connecting.push(n)}return n},l.prototype.destroy=function(t){var e=f(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},l.prototype.packet=function(t){u("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()})))},l.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},l.prototype.cleanup=function(){u("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},l.prototype.close=l.prototype.disconnect=function(){u("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},l.prototype.onclose=function(t){u("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},l.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout((function(){t.skipReconnect||(u("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(u("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(u("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(n)}})}},l.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var r=n(8),o=n(39),i=n(47),s=n(48);e.polling=function(t){var e=!1,n=!1,s=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,c=location.port;c||(c=a?443:80),e=t.hostname!==location.hostname||c!==t.port,n=t.secure!==a}if(t.xdomain=e,t.xscheme=n,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},e.websocket=s},function(t,e,n){var r=n(10),o=n(2),i=n(1),s=n(3),a=n(20),c=n(0)("engine.io-client:polling");t.exports=f;var u=null!=new(n(8))({xdomain:!1}).responseType;function f(t){var e=t&&t.forceBase64;u&&!e||(this.supportsBinary=!1),r.call(this,t)}s(f,r),f.prototype.name="polling",f.prototype.doOpen=function(){this.poll()},f.prototype.pause=function(t){var e=this;function n(){c("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(c("we are currently polling - waiting to pause"),r++,this.once("pollComplete",(function(){c("pre-pause polling complete"),--r||n()}))),this.writable||(c("we are currently writing - waiting to pause"),r++,this.once("drain",(function(){c("pre-pause writing complete"),--r||n()})))}else n()},f.prototype.poll=function(){c("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},f.prototype.onData=function(t){var e=this;c("polling got data %s",t);i.decodePayload(t,this.socket.binaryType,(function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():c('ignoring poll - transport state "%s"',this.readyState))},f.prototype.doClose=function(){var t=this;function e(){c("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(c("transport open - closing"),e()):(c("transport not open - deferring close"),this.once("open",e))},f.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};i.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,n)}))},f.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=o.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var r=n(41),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,a=n.length;o<a;o++)if(t(n[o]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var c in n)if(Object.prototype.hasOwnProperty.call(n,c)&&t(n[c]))return!0;return!1}}).call(this,n(7).Buffer)},function(t,e,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},s=0,a=0;function c(t){var e="";do{e=o[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function u(){var t=c(+new Date);return t!==r?(s=0,r=t):t+"."+c(s++)}for(;a<64;a++)i[o[a]]=a;u.encode=c,u.decode=function(t){var e=0;for(a=0;a<t.length;a++)e=64*e+i[t.charAt(a)];return e},t.exports=u},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){var r=n(5),o=n(6),i=n(50),s=n(23),a=n(24),c=n(0)("socket.io-client:socket"),u=n(2),f=n(19);t.exports=l;var h={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},p=o.prototype.emit;function l(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(l.prototype),l.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[s(t,"open",a(this,"onopen")),s(t,"packet",a(this,"onpacket")),s(t,"close",a(this,"onclose"))]}},l.prototype.open=l.prototype.connect=function(){return this.connected||(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting")),this},l.prototype.send=function(){var t=i(arguments);return t.unshift("message"),this.emit.apply(this,t),this},l.prototype.emit=function(t){if(h.hasOwnProperty(t))return p.apply(this,arguments),this;var e=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:f(e))?r.BINARY_EVENT:r.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(c("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},l.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},l.prototype.onopen=function(){if(c("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?u.encode(this.query):this.query;c("sending connect packet with query %s",t),this.packet({type:r.CONNECT,query:t})}else this.packet({type:r.CONNECT})},l.prototype.onclose=function(t){c("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},l.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===r.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(t);break;case r.ACK:case r.BINARY_ACK:this.onack(t);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",t.data)}},l.prototype.onevent=function(t){var e=t.data||[];c("emitting event %j",e),null!=t.id&&(c("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?p.apply(this,e):this.receiveBuffer.push(e)},l.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);c("sending ack %j",o),e.packet({type:f(o)?r.BINARY_ACK:r.ACK,id:t,data:o})}}},l.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(c("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):c("bad ack %s",t.id)},l.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},l.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)p.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},l.prototype.ondisconnect=function(){c("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},l.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},l.prototype.close=l.prototype.disconnect=function(){return this.connected&&(c("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},l.prototype.compress=function(t){return this.flags.compress=t,this},l.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e,n){var r=n(12),o=n(0)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(o("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),o("parse %s",t),n=r(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var i=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+i+":"+n.port,n.href=n.protocol+"://"+i+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function s(...t){if(!s.enabled)return;const e=s,o=Number(new Date),i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;a++;const i=r.formatters[o];if("function"==typeof i){const r=t[a];n=i.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=o,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function o(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function i(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function s(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},r.disable=function(){const t=[...r.names.map(s),...r.skips.map(s).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(e=0;e<o;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(27),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=6e4,o=60*r,i=24*o;function s(t,e,n,r){var o=e>=1.5*n;return Math.round(t/n)+" "+r+(o?"s":"")}t.exports=function(t,e){e=e||{};var a=typeof t;if("string"===a&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var s=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(t);if("number"===a&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=i)return s(t,e,i,"day");if(e>=o)return s(t,e,o,"hour");if(e>=r)return s(t,e,r,"minute");if(e>=n)return s(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=i)return Math.round(t/i)+"d";if(e>=o)return Math.round(t/o)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){(function(r){function o(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(29)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))})),t.splice(i,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=o,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(o())}).call(this,n(13))},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,o=+new Date,i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(n,r){if("%%"===n)return n;c++;var o=e.formatters[r];if("function"==typeof o){var i=s[c];n=o.call(t,i),s.splice(c,1),c--}return n})),e.formatArgs.call(t,s);var u=r.log||e.log||console.log.bind(console);u.apply(t,s)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=o,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function o(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var i=e.instances[n];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(30),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=6e4,o=60*r,i=24*o;function s(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var a,c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var s=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?s(a=t,i,"day")||s(a,o,"hour")||s(a,r,"minute")||s(a,n,"second")||a+" ms":function(t){if(t>=i)return Math.round(t/i)+"d";if(t>=o)return Math.round(t/o)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(14),o=n(15),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,i=t;return i.data=function t(e,n){if(!e)return e;if(o(e)){var i={_placeholder:!0,num:n.length};return n.push(e),i}if(r(e)){for(var s=new Array(e.length),a=0;a<e.length;a++)s[a]=t(e[a],n);return s}if("object"==typeof e&&!(e instanceof Date)){s={};for(var c in e)s[c]=t(e[c],n);return s}return e}(n,e),i.attachments=e.length,{packet:i,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(r(e))for(var o=0;o<e.length;o++)e[o]=t(e[o],n);else if("object"==typeof e)for(var i in e)e[i]=t(e[i],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,i=t;!function t(c,u,f){if(!c)return c;if(s&&c instanceof Blob||a&&c instanceof File){n++;var h=new FileReader;h.onload=function(){f?f[u]=this.result:i=this.result,--n||e(i)},h.readAsArrayBuffer(c)}else if(r(c))for(var p=0;p<c.length;p++)t(c[p],p,c);else if("object"==typeof c&&!o(c))for(var l in c)t(c[l],l,c)}(i),n||e(i)}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.byteLength=function(t){var e=u(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=u(t),s=r[0],a=r[1],c=new i(function(t,e,n){return 3*(e+n)/4-n}(0,s,a)),f=0,h=a>0?s-4:s;for(n=0;n<h;n+=4)e=o[t.charCodeAt(n)]<<18|o[t.charCodeAt(n+1)]<<12|o[t.charCodeAt(n+2)]<<6|o[t.charCodeAt(n+3)],c[f++]=e>>16&255,c[f++]=e>>8&255,c[f++]=255&e;2===a&&(e=o[t.charCodeAt(n)]<<2|o[t.charCodeAt(n+1)]>>4,c[f++]=255&e);1===a&&(e=o[t.charCodeAt(n)]<<10|o[t.charCodeAt(n+1)]<<4|o[t.charCodeAt(n+2)]>>2,c[f++]=e>>8&255,c[f++]=255&e);return c},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],s=0,a=n-o;s<a;s+=16383)i.push(f(t,s,s+16383>a?a:s+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function f(t,e,n){for(var o,i,s=[],a=e;a<n;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,s,a=8*o-r-1,c=(1<<a)-1,u=c>>1,f=-7,h=n?o-1:0,p=n?-1:1,l=t[e+h];for(h+=p,i=l&(1<<-f)-1,l>>=-f,f+=a;f>0;i=256*i+t[e+h],h+=p,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=r;f>0;s=256*s+t[e+h],h+=p,f-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(l?-1:1);s+=Math.pow(2,r),i-=u}return(l?-1:1)*s*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var s,a,c,u=8*i-o-1,f=(1<<u)-1,h=f>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,l=r?0:i-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+h>=1?p/c:p*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=f?(a=0,s=f):s+h>=1?(a=(e*c-1)*Math.pow(2,o),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;t[n+l]=255&a,l+=d,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;t[n+l]=255&s,l+=d,s/=256,u-=8);t[n+l-d]|=128*y}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(37),t.exports.parser=n(1)},function(t,e,n){var r=n(17),o=n(11),i=n(0)("engine.io-client:socket"),s=n(21),a=n(1),c=n(12),u=n(2);function f(t,e){if(!(this instanceof f))return new f(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=c(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=c(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=u.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=f,f.priorWebsocketSuccess=!1,o(f.prototype),f.protocol=a.protocol,f.Socket=f,f.Transport=n(10),f.transports=n(17),f.parser=n(1),f.prototype.createTransport=function(t){i('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new r[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},f.prototype.open=function(){var t;if(this.rememberUpgrade&&f.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},f.prototype.setTransport=function(t){i("setting transport %s",t.name);var e=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},f.prototype.probe=function(t){i('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;f.priorWebsocketSuccess="websocket"===e.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause((function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),p(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())}))}else{i('probe transport "%s" failed',t);var s=new Error("probe error");s.transport=e.name,r.emit("upgradeError",s)}})))}function s(){n||(n=!0,p(),e.close(),e=null)}function a(n){var o=new Error("probe error: "+n);o.transport=e.name,s(),i('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",o)}function c(){a("transport closed")}function u(){a("socket closed")}function h(t){e&&t.name!==e.name&&(i('"%s" works - aborting "%s"',t.name,e.name),s())}function p(){e.removeListener("open",o),e.removeListener("error",a),e.removeListener("close",c),r.removeListener("close",u),r.removeListener("upgrading",h)}f.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",a),e.once("close",c),this.once("close",u),this.once("upgrading",h),e.open()},f.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",f.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},f.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else i('packet received with socket readyState "%s"',this.readyState)},f.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},f.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},f.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){i("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},f.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},f.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},f.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},f.prototype.write=f.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},f.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},f.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():e()})):this.upgrading?r():e()}function e(){t.onClose("forced close"),i("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return this},f.prototype.onError=function(t){i("socket error %j",t),f.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},f.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},f.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~s(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var r=n(8),o=n(18),i=n(11),s=n(3),a=n(0)("engine.io-client:polling-xhr"),c=n(9);function u(){}function f(t){if(o.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function h(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=f,t.exports.Request=h,s(f,o),f.prototype.supportsBinary=!0,f.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new h(t)},f.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),o=this;r.on("success",e),r.on("error",(function(t){o.onError("xhr post error",t)})),this.sendXhr=r},f.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},i(h.prototype),h.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new r(t),n=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var o in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&e.setRequestHeader(o,this.extraHeaders[o])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof e.status?e.status:0)}),0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){n.onError(t)}),0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)},h.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},h.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},h.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},h.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}},h.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},h.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},h.prototype.abort=function(){this.cleanup()},h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",p);else if("function"==typeof addEventListener){addEventListener("onpagehide"in c?"pagehide":"unload",p,!1)}function p(){for(var t in h.requests)h.requests.hasOwnProperty(t)&&h.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){function n(){}t.exports=function(t,e,r){var o=!1;return r=r||n,i.count=t,0===t?e():i;function i(t,n){if(i.count<=0)throw new Error("after called too many times");--i.count,t?(o=!0,e(t),e=r):0!==i.count||o||e(null,n)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,o,i=String.fromCharCode;function s(t){for(var e,n,r=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(n=t.charCodeAt(o++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--):r.push(e);return r}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function c(t,e){return i(t>>e&63|128)}function u(t,e){if(0==(4294967168&t))return i(t);var n="";return 0==(4294965248&t)?n=i(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),n=i(t>>12&15|224),n+=c(t,6)):0==(4292870144&t)&&(n=i(t>>18&7|240),n+=c(t,12),n+=c(t,6)),n+=i(63&t|128)}function f(){if(o>=r)throw Error("Invalid byte index");var t=255&n[o];if(o++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function h(t){var e,i;if(o>r)throw Error("Invalid byte index");if(o==r)return!1;if(e=255&n[o],o++,0==(128&e))return e;if(192==(224&e)){if((i=(31&e)<<6|f())>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&e)){if((i=(15&e)<<12|f()<<6|f())>=2048)return a(i,t)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(i=(7&e)<<18|f()<<12|f()<<6|f())>=65536&&i<=1114111)return i;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,r=s(t),o=r.length,i=-1,a="";++i<o;)a+=u(r[i],n);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;n=s(t),r=n.length,o=0;for(var c,u=[];!1!==(c=h(a));)u.push(c);return function(t){for(var e,n=t.length,r=-1,o="";++r<n;)(e=t[r])>65535&&(o+=i((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=i(e);return o}(u)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,r,o,i,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var f=new ArrayBuffer(a),h=new Uint8Array(f);for(e=0;e<c;e+=4)r=n[t.charCodeAt(e)],o=n[t.charCodeAt(e+1)],i=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],h[u++]=r<<2|o>>4,h[u++]=(15&o)<<4|i>>2,h[u++]=(3&i)<<6|63&s;return f}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function s(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t}))}function a(t,e){e=e||{};var r=new n;return s(t).forEach((function(t){r.append(t)})),e.type?r.getBlob(e.type):r.getBlob()}function c(t,e){return new Blob(s(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,c.prototype=Blob.prototype),t.exports=r?o?Blob:c:i?a:void 0},function(t,e,n){var r=n(18),o=n(3),i=n(9);t.exports=f;var s,a=/\n/g,c=/\\n/g;function u(){}function f(t){r.call(this,t),this.query=this.query||{},s||(s=i.___eio=i.___eio||[]),this.index=s.length;var e=this;s.push((function(t){e.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){e.script&&(e.script.onerror=u)}),!1)}o(f,r),f.prototype.supportsBinary=!1,f.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},f.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},f.prototype.doWrite=function(t,e){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=s,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function u(){f(),e()}function f(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),f(),t=t.replace(c,"\\\n"),this.area.value=t.replace(a,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&u()}:this.iframe.onload=u}},function(t,e,n){(function(e){var r,o,i=n(10),s=n(1),a=n(2),c=n(3),u=n(20),f=n(0)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{o=n(49)}catch(t){}var h=r||o;function p(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=r&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(h=o),i.call(this,t)}t.exports=p,c(p,i),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new h(t,e):new h(t):new h(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},p.prototype.write=function(t){var n=this;this.writable=!1;for(var r=t.length,o=0,i=r;o<i;o++)!function(t){s.encodePacket(t,n.supportsBinary,(function(o){if(!n.usingBrowserWebSocket){var i={};if(t.options&&(i.compress=t.options.compress),n.perMessageDeflate)("string"==typeof o?e.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(t){f("websocket closed before onclose event")}--r||a()}))}(t[o]);function a(){n.emit("flush"),setTimeout((function(){n.writable=!0,n.emit("drain")}),0)}},p.prototype.onClose=function(){i.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=u()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},p.prototype.check=function(){return!(!h||"__initialize"in h&&this.name===p.prototype.name)}}).call(this,n(7).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],r=(e=e||0)||0;r<t.length;r++)n[r-e]=t[r];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e,n){var r=n(53),o=n(54);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function a(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],c=e.base?i[0]+e.base:i[0],u=n[c]||0,f="".concat(c," ").concat(u);n[c]=u+1;var h=a(f),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==h?(s[h].references++,s[h].updater(p)):s.push({identifier:f,updater:g(p,e),references:1}),r.push(f)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=i(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var f,h=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function p(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=h(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function l(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,y=0;function g(t,e){var n,r,o;if(e.singleton){var i=y++;n=d||(d=u(e)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=u(e),r=l.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=a(n[r]);s[o].references--}for(var i=c(t,e),u=0;u<n.length;u++){var f=a(n[u]);0===s[f].references&&(s[f].updater(),s.splice(f,1))}n=i}}}},function(t,e,n){(e=n(55)(!1)).push([t.i,"* {\n    font-family: sans-serif;\n    /* cursor: crosshair; */\n    cursor: none;\n}\nbody {\n    margin: 0;\n}\ncanvas {\n    width: 100vw;\n    height: 100vh;\n    display: block;\n}\n\n.overlay {\n    z-index: 100;\n    width: 30vw;\n    display: block;\n    position: absolute;\n    padding: 0.8em;\n    top: 0;\n    left: 0;\n    color: lightgray;\n    background-color: rgba(20, 20, 20, 0.4);\n}\n",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}var s,a,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e){t.exports="#version 300 es\nprecision mediump float;\n\nuniform float u_TimeDelta;\nuniform float u_Time;\nuniform sampler2D u_RgNoise;\nuniform vec2 u_Gravity;\n\n// PARTICLE SPECIFIC ----------\nuniform vec2 u_Origin;\nuniform float u_MinTheta;\nuniform float u_MaxTheta;\nuniform float u_MinSpeed;\nuniform float u_MaxSpeed;\n// ----------------------------\n\nuniform sampler2D u_ForceField;\n\n// PARTICLE SPECIFIC ----------\nin vec2 i_Position;\nin float i_Age;\nin float i_Life;\nin vec2 i_Velocity;\n// ----------------------------\n\n\n// Transform Feedback Varyings\nout vec2 v_Position;\nout float v_Age;\nout float v_Life;\nout vec2 v_Velocity;\n\nvec2 attractorLoc1 = vec2(-0.5,0.0);\nvec2 attractorLoc2 = vec2(0.5,0.0);\nvec2 acceleration = vec2(0.0,0.0);\nfloat mass = 50.0;\n\nvec2 grad(vec2 p) {\n    const float texture_width = 512.0;\n    vec4 v = texture(u_RgNoise, vec2(p.x + u_Time*2.0 / texture_width, p.y + u_Time*2.0 / texture_width));\n    return normalize(v.xy*2.0 - vec2(1.0));\n}\n\n/* S-shaped curve for 0 <= t <= 1 */\nfloat fade(float t) {\n    return t*t*t*(t*(t*6.0 - 15.0) + 10.0);\n}\n\n\n/* 2D noise */\nfloat noise(vec2 p) {\n    /* Calculate lattice points. */\n    vec2 p0 = floor(p);\n    vec2 p1 = p0 + vec2(1.0, 0.0);\n    vec2 p2 = p0 + vec2(0.0, 1.0);\n    vec2 p3 = p0 + vec2(1.0, 1.0);\n\n    /* Look up gradients at lattice points. */\n    vec2 g0 = grad(p0);\n    vec2 g1 = grad(p1);\n    vec2 g2 = grad(p2);\n    vec2 g3 = grad(p3);\n\n    float t0 = p.x - p0.x;\n    float fade_t0 = fade(t0); /* Used for interpolation in horizontal direction */\n\n    float t1 = p.y - p0.y;\n    float fade_t1 = fade(t1); /* Used for interpolation in vertical direction. */\n\n    /* Calculate dot products and interpolate.*/\n    float p0p1 = (1.0 - fade_t0) * dot(g0, (p - p0)) + fade_t0 * dot(g1, (p - p1)); /* between upper two lattice points */\n    float p2p3 = (1.0 - fade_t0) * dot(g2, (p - p2)) + fade_t0 * dot(g3, (p - p3)); /* between lower two lattice points */\n\n    /* Calculate final result */\n    return (1.0 - fade_t1) * p0p1 + fade_t1 * p2p3;\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nvec2 attract(vec2 attactor, vec2 loc){\n    vec2 dir = attactor - loc;\n    float d = length(dir);\n    normalize(dir);\n    float force = 500.0/(1.0*d*d);\n    dir *= force;\n    return dir;\n}\n\nvoid main(){\n    if(i_Age >= i_Life) {\n        // Sampling the texture based on particle ID.\n        // This will return the same random seed value for each particle\n        // every time.\n        ivec2 noise_coord = ivec2(gl_VertexID % 512, gl_VertexID / 512);\n        vec2 rand = texelFetch(u_RgNoise, noise_coord, 0).rg;\n        // Initial direction of particle based on random value\n        float theta = u_MinTheta + rand.r*(u_MaxTheta - u_MinTheta);\n\n        float x = cos(theta);\n        float y = sin(theta);\n\n        v_Position = u_Origin;\n        // v_Position = vec2((random(rand.xy)*2.0)-1.0, (random(rand.yx)*2.0)-1.0);\n\n        v_Age = 0.0;\n        v_Life = i_Life;\n\n        v_Velocity = vec2(x, y) * (u_MinSpeed + rand.g * (u_MaxSpeed - u_MinSpeed));\n    } else {\n        v_Position = i_Position + i_Velocity * u_TimeDelta;\n        acceleration += attract(attractorLoc1, v_Position);\n        acceleration += attract(attractorLoc2, v_Position);\n        acceleration /= mass;\n        v_Age = i_Age + u_TimeDelta;\n        v_Life = i_Life;\n        // vec2 force = 4.0 * (2.0 * texture(u_ForceField, i_Position).rg - vec2(1.0));\n        float n = \n            noise(i_Position/64.0) * 1.0 +\n            noise(i_Position/32.0) * 0.5 +\n            noise(i_Position/16.0) * 0.25 +\n            noise(i_Position/8.0)  * 0.125;\n        vec2 force = i_Position*n*50.0;\n        // v_Velocity = i_Velocity * 0.9 + acceleration * u_TimeDelta * 0.005 + u_Gravity * u_TimeDelta + force * u_TimeDelta;\n        v_Velocity = i_Velocity + acceleration * u_TimeDelta * 0.1 + u_Gravity * u_TimeDelta + force * u_TimeDelta;\n        acceleration *= 0.0;\n    }\n}\n"},function(t,e){t.exports="#version 300 es\nprecision mediump float;\n\nout vec4 o_FragColor;\n\nvoid main() {\n    o_FragColor = vec4(1.0);\n}\n\n"},function(t,e){t.exports="#version 300 es\nprecision mediump float;\n\nin float v_Age;\nin float v_Life;\n\nout vec4 o_FragColor;\n\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d){\n    return a+b*cos(6.28318*(c*t+d));\n}\n\nvoid main() {\n    float t = v_Age/v_Life;\n    o_FragColor = vec4(\n            palette(t,\n                vec3(0.8,0.3,0.2),\n                vec3(0.7,0.3,0.3),\n                vec3(0.9,0.4,0.2),\n                vec3(0.2,0.15,0.20)), 1.0-t\n            );\n}\n"},function(t,e){t.exports="#version 300 es\nprecision mediump float;\n\nin vec2 i_Position;\nin float i_Age;\nin float i_Life;\nin vec2 i_Velocity;\n\nout float v_Age;\nout float v_Life;\n\nvoid main(){\n    v_Age = i_Age;\n    v_Life = i_Life;\n\n    gl_PointSize = 1.0 + 6.0 * (1.0 - i_Age/i_Life);\n    gl_Position = vec4(i_Position, 0.0, 1.0);\n}\n"},function(t,e,n){"use strict";function r(t,e,n,r){const i=t.createProgram(),s=o(t,t.VERTEX_SHADER,e),a=o(t,t.FRAGMENT_SHADER,n);return t.attachShader(i,s),t.attachShader(i,a),null!=r&&t.transformFeedbackVaryings(i,r,t.INTERLEAVED_ATTRIBS),t.linkProgram(i),t.getProgramParameter(i,t.LINK_STATUS)?i:(alert("Unable to initialize the shader program: "+t.getProgramInfoLog(i)),null)}function o(t,e,n){const r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(alert("An error occurred compiling the shaders: "+t.getShaderInfoLog(r)),t.deleteShader(r),null)}function i(t,e,n){t.bindVertexArray(n);for(let n=0;n<e.length;n++){const r=e[n];t.bindBuffer(t.ARRAY_BUFFER,r.buffer_object);let o=0;for(const e in r.attribs)if(r.attribs.hasOwnProperty(e)){const n=r.attribs[e];t.enableVertexAttribArray(n.location),t.vertexAttribPointer(n.location,n.num_components,n.type,!1,r.stride,o);const i=4;o+=n.num_components*i,n.hasOwnProperty("divisor")&&t.vertexAttribDivisor(n.location,n.divisor)}}t.bindVertexArray(null),t.bindBuffer(t.ARRAY_BUFFER,null)}function s(t,e,n,o,s,a,c,u,f,h,p,l,d){if(u<c)throw"Invalid age range";if(h<f||f<-Math.PI||h>Math.PI)throw"Invalid theta range.";const y=r(t,e[0],e[1],["v_Position","v_Age","v_Life","v_Velocity"]),g=r(t,n[0],n[1],null),m={i_Position:{location:t.getAttribLocation(y,"i_Position"),num_components:2,type:t.FLOAT},i_Age:{location:t.getAttribLocation(y,"i_Age"),num_components:1,type:t.FLOAT},i_Life:{location:t.getAttribLocation(y,"i_Life"),num_components:1,type:t.FLOAT},i_Velocity:{location:t.getAttribLocation(y,"i_Velocity"),num_components:2,type:t.FLOAT}},v={i_Position:{location:t.getAttribLocation(g,"i_Position"),num_components:2,type:t.FLOAT},i_Age:{location:t.getAttribLocation(g,"i_Age"),num_components:1,type:t.FLOAT},i_Life:{location:t.getAttribLocation(g,"i_Life"),num_components:1,type:t.FLOAT}},b=[t.createBuffer(),t.createBuffer()],w=[t.createVertexArray(),t.createVertexArray(),t.createVertexArray(),t.createVertexArray()],_=[{vao:w[0],buffers:[{buffer_object:b[0],stride:24,attribs:m}]},{vao:w[1],buffers:[{buffer_object:b[1],stride:24,attribs:m}]},{vao:w[2],buffers:[{buffer_object:b[0],stride:24,attribs:v}]},{vao:w[3],buffers:[{buffer_object:b[1],stride:24,attribs:v}]}],C=new Float32Array(function(t,e,n){var r=[];for(let o=0;o<t;++o){r.push(Math.random(),Math.random());let t=e+Math.random()*(n-e);r.push(t+1,t),r.push(0,0)}return r}(s,c,u));t.bindBuffer(t.ARRAY_BUFFER,b[0]),t.bufferData(t.ARRAY_BUFFER,C,t.STREAM_DRAW),t.bindBuffer(t.ARRAY_BUFFER,b[1]),t.bufferData(t.ARRAY_BUFFER,C,t.STREAM_DRAW);for(let e=0;e<_.length;e++)i(t,_[e].buffers,_[e].vao);t.clearColor(0,0,0,1);const A=t.createTexture();t.bindTexture(t.TEXTURE_2D,A),t.texImage2D(t.TEXTURE_2D,0,t.RG8,512,512,0,t.RG,t.UNSIGNED_BYTE,function(t,e){let n=[];for(let r=0;r<t*e;++r)n.push(255*Math.random()),n.push(255*Math.random());return new Uint8Array(n)}(512,512)),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.MIRRORED_REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.MIRRORED_REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST);const E=t.createTexture();return t.bindTexture(t.TEXTURE_2D,E),t.texImage2D(t.TEXTURE_2D,0,t.RGB8,t.RGB,t.UNSIGNED_BYTE,o),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),{particle_sys_buffers:b,particle_sys_vaos:w,read:0,write:1,particle_update_program:y,particle_render_program:g,num_particles:C.length/6,old_timestamp:0,rg_noise:A,total_time:0,born_particles:0,birth_rate:a,gravity:d,origin:[0,0],min_theta:f,max_theta:h,min_speed:p,max_speed:l,force_field:E}}n.r(e);var a=n(4),c=n.n(a),u=(n(52),n.p+"6003f206bcf086ba0f5cbbfa96715c5e.png"),f=n(56),h=n(57),p=n(58),l=n(59),d={},y=c()();function g(t,e){return s(t,[f,h],[l,p],e,1e3,.5,1.01,1.45,-Math.PI,Math.PI,-.3,.3,[0,0])}window.onload=function(){var[t,e]=function(t,e){let n=document.createElement("canvas");n.width=t,n.height=e,document.getElementsByTagName("body")[0].appendChild(n);const r=n.getContext("webgl2");return[n,r]}(window.innerWidth,window.innerHeight),n=new Image;n.src=u;const r=localStorage.getItem("UID")?localStorage.getItem("UID"):function(){let t="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let n=0;n<15;n++)t+=e.charAt(Math.floor(Math.random()*e.length));return localStorage.setItem("UID",t),t}();n.onload=function(){var o=g(e,n);d[r]=o,t.onmousemove=function(t){const e=2*(t.pageX-this.offsetLeft)/this.width-1,n=-(2*(t.pageY-this.offsetTop)/this.height-1);d[r].origin=[e,n],y.emit("updateParticleSystem",{uid:r,location:[e,n]})},window.requestAnimationFrame((function t(o){y.on("updateUsersList",(function(t){for(const r of t)d.hasOwnProperty(r)||(d[r]=g(e,n));for(const e in d)if(-1===t.indexOf(e)){let t=Object.assign({},d);delete t[e],d=t}})),y.on("newLocations",(function(t){t.uid!==r&&d.hasOwnProperty(t.uid)&&(d[t.uid].origin=t.location)})),function(t,e,n){t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT);for(let s in e){const a=e[s];var r=a.born_particles,o=0;0!=a.old_timestamp&&(o=n-a.old_timestamp)>500&&(o=0),a.born_particles<a.num_particles&&(a.born_particles=Math.min(a.num_particles,Math.floor(a.born_particles+a.birth_rate*o))),a.old_timestamp=n,t.useProgram(a.particle_update_program),t.uniform1f(t.getUniformLocation(a.particle_update_program,"u_TimeDelta"),o/1e3),t.uniform1f(t.getUniformLocation(a.particle_update_program,"u_Time"),a.total_time/1e3),t.uniform1f(t.getUniformLocation(a.particle_update_program,"u_TotalTime"),a.total_time),t.uniform2f(t.getUniformLocation(a.particle_update_program,"u_Gravity"),a.gravity[0],a.gravity[1]),t.uniform2f(t.getUniformLocation(a.particle_update_program,"u_Origin"),a.origin[0],a.origin[1]),t.uniform1f(t.getUniformLocation(a.particle_update_program,"u_MinTheta"),a.min_theta),t.uniform1f(t.getUniformLocation(a.particle_update_program,"u_MaxTheta"),a.max_theta),t.uniform1f(t.getUniformLocation(a.particle_update_program,"u_MinSpeed"),a.min_speed),t.uniform1f(t.getUniformLocation(a.particle_update_program,"u_MaxSpeed"),a.max_speed),a.total_time+=o,t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,a.rg_noise),t.uniform1i(t.getUniformLocation(a.particle_update_program,"u_RgNoise"),0),t.activeTexture(t.TEXTURE1),t.bindTexture(t.TEXTURE_2D,a.force_field),t.uniform1i(t.getUniformLocation(a.particle_update_program,"u_ForceField"),1),t.bindVertexArray(a.particle_sys_vaos[a.read]),t.bindBufferBase(t.TRANSFORM_FEEDBACK_BUFFER,0,a.particle_sys_buffers[a.write]),t.enable(t.RASTERIZER_DISCARD),t.beginTransformFeedback(t.POINTS),t.drawArrays(t.POINTS,0,r),t.endTransformFeedback(),t.disable(t.RASTERIZER_DISCARD),t.bindBufferBase(t.TRANSFORM_FEEDBACK_BUFFER,0,null),t.bindVertexArray(a.particle_sys_vaos[a.read+2]),t.useProgram(a.particle_render_program),t.drawArrays(t.POINTS,0,r);var i=a.read;a.read=a.write,a.write=i}}(e,d,o),window.requestAnimationFrame(t)}))}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1pbmhlcml0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2dsb2JhbFRoaXMuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3llYXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYmluYXJ5LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWNvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy14aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWZ0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL3V0ZjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ibG9iL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmctanNvbnAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1hcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMuY3NzPzQ0YjIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsc2wvcGFydGljbGVfdXBkYXRlX3ZlcnQuZ2xzbCIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9wYXNzdGhydV9mcmFnLmdsc2wiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsc2wvcGFydGljbGVfcmVuZGVyX2ZyYWcuZ2xzbCIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9wYXJ0aWNsZV9yZW5kZXJfdmVydC5nbHNsIiwid2VicGFjazovLy8uL3NyYy9zZXR1cC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3JncGVybGluLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiYSIsImkiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJsb2ciLCJhcmdzIiwiY29uc29sZSIsImZvcm1hdEFyZ3MiLCJ0aGlzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiY29sb3IiLCJzcGxpY2UiLCJpbmRleCIsImxhc3RDIiwicmVwbGFjZSIsIm1hdGNoIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJlcnJvciIsImxvYWQiLCJnZXRJdGVtIiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwidHlwZSIsIl9fbndqcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCJwYXJzZUludCIsIlJlZ0V4cCIsIiQxIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJiYXNlNjRlbmNvZGVyIiwia2V5cyIsImhhc0JpbmFyeSIsInNsaWNlQnVmZmVyIiwiYWZ0ZXIiLCJ1dGY4IiwiQXJyYXlCdWZmZXIiLCJpc0FuZHJvaWQiLCJ0ZXN0IiwiaXNQaGFudG9tSlMiLCJkb250U2VuZEJsb2JzIiwicHJvdG9jb2wiLCJwYWNrZXRzIiwib3BlbiIsImNsb3NlIiwicGluZyIsInBvbmciLCJ1cGdyYWRlIiwibm9vcCIsInBhY2tldHNsaXN0IiwiZXJyIiwiZGF0YSIsIkJsb2IiLCJtYXAiLCJhcnkiLCJlYWNoIiwiZG9uZSIsInJlc3VsdCIsIkFycmF5IiwibGVuZ3RoIiwibmV4dCIsImVhY2hXaXRoSW5kZXgiLCJlbCIsImNiIiwibXNnIiwiZW5jb2RlUGFja2V0IiwicGFja2V0Iiwic3VwcG9ydHNCaW5hcnkiLCJ1dGY4ZW5jb2RlIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJidWZmZXIiLCJlbmNvZGVCYXNlNjRQYWNrZXQiLCJjb250ZW50QXJyYXkiLCJVaW50OEFycmF5IiwicmVzdWx0QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImVuY29kZUFycmF5QnVmZmVyIiwiZnIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJlbmNvZGVCbG9iIiwiYmFzZTY0IiwiZW5jb2RlQmFzZTY0T2JqZWN0IiwiZW5jb2RlZCIsImVuY29kZSIsIlN0cmluZyIsInN0cmljdCIsImI2NGRhdGEiLCJiNjQiLCJzcGxpdCIsInJlYWRBc0RhdGFVUkwiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImUiLCJ0eXBlZCIsImJhc2ljIiwiYnRvYSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwiZGVjb2RlIiwidHJ5RGVjb2RlIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwicmVzdCIsImVuY29kZVBheWxvYWQiLCJpc0JpbmFyeSIsImVuY29kZVBheWxvYWRBc0Jsb2IiLCJlbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciIsImRvbmVDYWxsYmFjayIsInNldExlbmd0aEhlYWRlciIsInJlc3VsdHMiLCJqb2luIiwiZGVjb2RlUGF5bG9hZCIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsImNociIsImVuY29kZWRQYWNrZXRzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJsZW4iLCJ0b1N0cmluZyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJmb3JFYWNoIiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJjaGFyQ29kZUF0IiwibGVuU3RyIiwiYmluYXJ5SWRlbnRpZmllciIsInNpemUiLCJsZW5ndGhBcnkiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInB1c2giLCJ0b3RhbCIsIm9iaiIsInN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsInFzIiwicXJ5IiwicGFpcnMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYiIsImZuIiwiY29uc3RydWN0b3IiLCJ1cmwiLCJwYXJzZXIiLCJNYW5hZ2VyIiwiZGVidWciLCJsb29rdXAiLCJjYWNoZSIsIm1hbmFnZXJzIiwidXJpIiwib3B0cyIsImlvIiwicGFyc2VkIiwic291cmNlIiwiaWQiLCJwYXRoIiwic2FtZU5hbWVzcGFjZSIsIm5zcHMiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsInF1ZXJ5Iiwic29ja2V0IiwiY29ubmVjdCIsIlNvY2tldCIsIkVtaXR0ZXIiLCJiaW5hcnkiLCJpc0FycmF5IiwiaXNCdWYiLCJFbmNvZGVyIiwidHlwZXMiLCJDT05ORUNUIiwiRElTQ09OTkVDVCIsIkVWRU5UIiwiQUNLIiwiRVJST1IiLCJCSU5BUllfRVZFTlQiLCJCSU5BUllfQUNLIiwiRGVjb2RlciIsIkVSUk9SX1BBQ0tFVCIsImVuY29kZUFzU3RyaW5nIiwiYXR0YWNobWVudHMiLCJuc3AiLCJwYXlsb2FkIiwidHJ5U3RyaW5naWZ5IiwicmVjb25zdHJ1Y3RvciIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJyZWNvblBhY2siLCJyZW1vdmVCbG9icyIsImJsb2JsZXNzRGF0YSIsImRlY29uc3RydWN0aW9uIiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJwYWNrIiwidW5zaGlmdCIsImVuY29kZUFzQmluYXJ5IiwiYWRkIiwiYnVmIiwiRXJyb3IiLCJwYXJzZSIsInRyeVBhcnNlIiwiZGVjb2RlU3RyaW5nIiwiZW1pdCIsInRha2VCaW5hcnlEYXRhIiwiZGVzdHJveSIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJiaW5EYXRhIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJtaXhpbiIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiX2NhbGxiYWNrcyIsIm9uY2UiLCJvZmYiLCJhcmd1bWVudHMiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYWxsYmFja3MiLCJzbGljZSIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiQnVmZmVyIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiX19wcm90b19fIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiZnJvbSIsIlR5cGVFcnJvciIsImFycmF5IiwiYnl0ZU9mZnNldCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsImZyb21TdHJpbmciLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJjb3B5IiwidmFsIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwib2Zmc2V0IiwicmVtYWluaW5nIiwic3RyTGVuIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJnbG9iYWwiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJjb25maWd1cmFibGUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsIngiLCJ5IiwiY29uY2F0IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4IiwiZmxvb3IiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJzZXQiLCJjb2RlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInRyaW0iLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJoYXNDT1JTIiwiZ2xvYmFsVGhpcyIsInhkb21haW4iLCJ4c2NoZW1lIiwiZW5hYmxlc1hEUiIsIlhNTEh0dHBSZXF1ZXN0IiwiWERvbWFpblJlcXVlc3QiLCJzZWxmIiwiRnVuY3Rpb24iLCJUcmFuc3BvcnQiLCJob3N0bmFtZSIsInBvcnQiLCJzZWN1cmUiLCJ0aW1lc3RhbXBQYXJhbSIsInRpbWVzdGFtcFJlcXVlc3RzIiwicmVhZHlTdGF0ZSIsImFnZW50Iiwid2l0aENyZWRlbnRpYWxzIiwicGZ4IiwicGFzc3BocmFzZSIsImNlcnQiLCJjYSIsImNpcGhlcnMiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJmb3JjZU5vZGUiLCJpc1JlYWN0TmF0aXZlIiwiZXh0cmFIZWFkZXJzIiwibG9jYWxBZGRyZXNzIiwib25FcnJvciIsImRlc2MiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJvbkNsb3NlIiwic2VuZCIsIm9uT3BlbiIsIndyaXRhYmxlIiwib25EYXRhIiwib25QYWNrZXQiLCJyZSIsInBhcnRzIiwiZXhlYyIsImhvc3QiLCJhdXRob3JpdHkiLCJpcHY2dXJpIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwid2l0aE5hdGl2ZUJ1ZmZlciIsIndpdGhOYXRpdmVBcnJheUJ1ZmZlciIsImVpbyIsIkJhY2tvZmYiLCJoYXMiLCJzdWJzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlY29ubmVjdGlvbkRlbGF5TWF4IiwicmFuZG9taXphdGlvbkZhY3RvciIsImJhY2tvZmYiLCJqaXR0ZXIiLCJjb25uZWN0aW5nIiwibGFzdFBpbmciLCJwYWNrZXRCdWZmZXIiLCJfcGFyc2VyIiwiZW5jb2RlciIsImRlY29kZXIiLCJhdXRvQ29ubmVjdCIsImVtaXRBbGwiLCJ1cGRhdGVTb2NrZXRJZHMiLCJnZW5lcmF0ZUlkIiwiZW5naW5lIiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsInNldE1pbiIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwic2V0Sml0dGVyIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4Iiwic2V0TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsInJlY29ubmVjdGluZyIsImF0dGVtcHRzIiwicmVjb25uZWN0Iiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCJvbm9wZW4iLCJlcnJvclN1YiIsImNsZWFudXAiLCJ0aW1lciIsIm9ucGluZyIsIkRhdGUiLCJvbnBvbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJvbmVycm9yIiwib25Db25uZWN0aW5nIiwib3B0aW9ucyIsInByb2Nlc3NQYWNrZXRRdWV1ZSIsInNoaWZ0Iiwic3Vic0xlbmd0aCIsImRpc2Nvbm5lY3QiLCJyZXNldCIsIm9uY2xvc2UiLCJyZWFzb24iLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGQiLCJ4cyIsImpzb25wIiwibG9jYXRpb24iLCJpc1NTTCIsImZvcmNlSlNPTlAiLCJwYXJzZXFzIiwiaW5oZXJpdCIsInllYXN0IiwiUG9sbGluZyIsImhhc1hIUjIiLCJyZXNwb25zZVR5cGUiLCJmb3JjZUJhc2U2NCIsInBvbGwiLCJwYXVzZSIsIm9uUGF1c2UiLCJkb1BvbGwiLCJjYWxsYmFja2ZuIiwiZG9Xcml0ZSIsInNjaGVtYSIsInNpZCIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwicHJldiIsImFscGhhYmV0Iiwic2VlZCIsIm51bSIsIm5vdyIsImRlY29kZWQiLCJ0b0FycmF5IiwiaGFzQmluIiwiZXZlbnRzIiwiY29ubmVjdF9lcnJvciIsImNvbm5lY3RfdGltZW91dCIsInJlY29ubmVjdF9hdHRlbXB0IiwicmVjb25uZWN0X2ZhaWxlZCIsInJlY29ubmVjdF9lcnJvciIsImpzb24iLCJpZHMiLCJhY2tzIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0ZWQiLCJmbGFncyIsInN1YkV2ZW50cyIsImV2IiwiY29tcHJlc3MiLCJwb3AiLCJvbnBhY2tldCIsInJvb3ROYW1lc3BhY2VFcnJvciIsIm9uY29ubmVjdCIsIm9uZXZlbnQiLCJvbmFjayIsIm9uZGlzY29ubmVjdCIsImFjayIsInNlbnQiLCJlbWl0QnVmZmVyZWQiLCJwYXJzZXVyaSIsImxvYyIsImhyZWYiLCJzZWxlY3RDb2xvciIsImhhc2giLCJjcmVhdGVEZWJ1ZyIsImFicyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJtcyIsImNvZXJjZSIsImZvcm1hdCIsImZvcm1hdHRlciIsImV4dGVuZCIsImluaXQiLCJpbnN0YW5jZXMiLCJkZWxpbWl0ZXIiLCJuZXdEZWJ1ZyIsInRvTmFtZXNwYWNlIiwicmVnZXhwIiwiZGVmYXVsdCIsInN0YWNrIiwiZGlzYWJsZSIsIm5hbWVzIiwic2tpcHMiLCJlbmFibGUiLCJpbnN0YW5jZSIsImgiLCJwbHVyYWwiLCJtc0FicyIsImlzUGx1cmFsIiwicm91bmQiLCJwYXJzZUZsb2F0IiwibG9uZyIsImZtdExvbmciLCJmbXRTaG9ydCIsImNocm9tZSIsImxvY2FsIiwibG9nRm4iLCJjZWlsIiwicGFja2V0RGF0YSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBlbmRpbmdCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwiZyIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0bXAiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJvdXRwdXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwiTE4yIiwidHJhbnNwb3J0cyIsInRyYW5zcG9ydE9wdGlvbnMiLCJ3cml0ZUJ1ZmZlciIsInByZXZCdWZmZXJMZW4iLCJwb2xpY3lQb3J0IiwicmVtZW1iZXJVcGdyYWRlIiwib25seUJpbmFyeVVwZ3JhZGVzIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ0aHJlc2hvbGQiLCJwcm9kdWN0IiwidXBncmFkZXMiLCJwaW5nSW50ZXJ2YWwiLCJwaW5nVGltZW91dCIsInBpbmdJbnRlcnZhbFRpbWVyIiwicGluZ1RpbWVvdXRUaW1lciIsInByaW9yV2Vic29ja2V0U3VjY2VzcyIsImNyZWF0ZVRyYW5zcG9ydCIsImNsb25lIiwiRUlPIiwidHJhbnNwb3J0IiwicmVxdWVzdFRpbWVvdXQiLCJwcm90b2NvbHMiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwicHJvYmUiLCJmYWlsZWQiLCJvblRyYW5zcG9ydE9wZW4iLCJ1cGdyYWRlTG9zZXNCaW5hcnkiLCJ1cGdyYWRpbmciLCJmbHVzaCIsImZyZWV6ZVRyYW5zcG9ydCIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbnVwZ3JhZGUiLCJ0byIsIm9uSGFuZHNoYWtlIiwic2V0UGluZyIsImZpbHRlclVwZ3JhZGVzIiwib25IZWFydGJlYXQiLCJzZW5kUGFja2V0Iiwid2FpdEZvclVwZ3JhZGUiLCJjbGVhbnVwQW5kQ2xvc2UiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwiZW1wdHkiLCJSZXF1ZXN0IiwibWV0aG9kIiwiYXN5bmMiLCJyZXF1ZXN0IiwicmVxIiwic2VuZFhociIsInBvbGxYaHIiLCJ4aHIiLCJzZXREaXNhYmxlSGVhZGVyQ2hlY2siLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaGFzWERSIiwib25Mb2FkIiwicmVzcG9uc2VUZXh0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiY29udGVudFR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsInN0YXR1cyIsInJlcXVlc3RzQ291bnQiLCJyZXF1ZXN0cyIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsImFib3J0IiwicmVzcG9uc2UiLCJhdHRhY2hFdmVudCIsInVubG9hZEhhbmRsZXIiLCJhcnJheWJ1ZmZlciIsImFidiIsImlpIiwiY291bnQiLCJlcnJfY2IiLCJiYWlsIiwicHJveHkiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsInRvVXBwZXJDYXNlIiwiY3JlYXRlQnl0ZSIsImVuY29kZUNvZGVQb2ludCIsInN5bWJvbCIsInJlYWRDb250aW51YXRpb25CeXRlIiwiY29udGludWF0aW9uQnl0ZSIsImRlY29kZVN5bWJvbCIsImJ5dGUxIiwiYnl0ZVN0cmluZyIsInVjczJlbmNvZGUiLCJjaGFycyIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXciLCJibG9iQnVpbGRlclN1cHBvcnRlZCIsImFwcGVuZCIsImdldEJsb2IiLCJtYXBBcnJheUJ1ZmZlclZpZXdzIiwiY2h1bmsiLCJCbG9iQnVpbGRlckNvbnN0cnVjdG9yIiwiYmIiLCJwYXJ0IiwiQmxvYkNvbnN0cnVjdG9yIiwiSlNPTlBQb2xsaW5nIiwick5ld2xpbmUiLCJyRXNjYXBlZE5ld2xpbmUiLCJfX19laW8iLCJzY3JpcHQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmb3JtIiwiaWZyYW1lIiwiY3JlYXRlRWxlbWVudCIsImluc2VydEF0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbnNlcnRCZWZvcmUiLCJoZWFkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiYXJlYSIsImlmcmFtZUlkIiwiY2xhc3NOYW1lIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwic2V0QXR0cmlidXRlIiwiY29tcGxldGUiLCJpbml0SWZyYW1lIiwiaHRtbCIsImFjdGlvbiIsInN1Ym1pdCIsIkJyb3dzZXJXZWJTb2NrZXQiLCJOb2RlV2ViU29ja2V0IiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwiV2ViU29ja2V0SW1wbCIsIldTIiwidXNpbmdCcm93c2VyV2ViU29ja2V0IiwiY2hlY2siLCJoZWFkZXJzIiwid3MiLCJzdXBwb3J0cyIsImFkZEV2ZW50TGlzdGVuZXJzIiwib25tZXNzYWdlIiwiZmFjdG9yIiwicmFuZCIsInJhbmRvbSIsImRldmlhdGlvbiIsImFwaSIsImNvbnRlbnQiLCJsb2NhbHMiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJiYXNlIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwiaW5zZXJ0IiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwidW5lc2NhcGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImluaXRTaGFkZXJQcm9ncmFtIiwiZ2wiLCJ2c1NvdXJjZSIsImZzU291cmNlIiwidHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncyIsInNoYWRlclByb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwidmVydGV4U2hhZGVyIiwibG9hZFNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImF0dGFjaFNoYWRlciIsIklOVEVSTEVBVkVEX0FUVFJJQlMiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImFsZXJ0IiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwic2V0dXBQYXJ0aWNsZUJ1ZmZlclZBTyIsInZhbyIsImJpbmRWZXJ0ZXhBcnJheSIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJfb2JqZWN0IiwiYXR0cmliX25hbWUiLCJhdHRyaWJzIiwiYXR0cmliX2Rlc2MiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJudW1fY29tcG9uZW50cyIsInN0cmlkZSIsInR5cGVfc2l6ZSIsInZlcnRleEF0dHJpYkRpdmlzb3IiLCJkaXZpc29yIiwicHJvZ3JhbU9uZSIsInByb2dyYW1Ud28iLCJmb3JjZV9maWVsZF9pbWFnZSIsIm51bV9wYXJ0aWNsZXMiLCJwYXJ0aWNsZV9iaXJ0aF9yYXRlIiwibWluX2FnZSIsIm1heF9hZ2UiLCJtaW5fdGhldGEiLCJtYXhfdGhldGEiLCJtaW5fc3BlZWQiLCJtYXhfc3BlZWQiLCJncmF2aXR5IiwiUEkiLCJ1cGRhdGVfcHJvZ3JhbSIsInJlbmRlcl9wcm9ncmFtIiwidXBkYXRlX2F0dHJpYl9sb2NhdGlvbnMiLCJpX1Bvc2l0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJGTE9BVCIsImlfQWdlIiwiaV9MaWZlIiwiaV9WZWxvY2l0eSIsInJlbmRlcl9hdHRyaWJfbG9jYXRpb25zIiwidmFvcyIsImNyZWF0ZVZlcnRleEFycmF5IiwidmFvX2Rlc2MiLCJpbml0aWFsX2RhdGEiLCJGbG9hdDMyQXJyYXkiLCJudW1fcGFydHMiLCJsaWZlIiwiaW5pdGlhbFBhcnRpY2xlRGF0YSIsImJ1ZmZlckRhdGEiLCJTVFJFQU1fRFJBVyIsImNsZWFyQ29sb3IiLCJyZ19ub2lzZV90ZXh0dXJlIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleEltYWdlMkQiLCJSRzgiLCJSRyIsIlVOU0lHTkVEX0JZVEUiLCJzaXplX3giLCJzaXplX3kiLCJyYW5kb21SR0RhdGEiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJNSVJST1JFRF9SRVBFQVQiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIk5FQVJFU1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJmb3JjZV9maWVsZF90ZXh0dXJlIiwiUkdCOCIsIlJHQiIsIlJFUEVBVCIsIkxJTkVBUiIsIkJMRU5EIiwiYmxlbmRGdW5jIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsInBhcnRpY2xlX3N5c19idWZmZXJzIiwicGFydGljbGVfc3lzX3Zhb3MiLCJwYXJ0aWNsZV91cGRhdGVfcHJvZ3JhbSIsInBhcnRpY2xlX3JlbmRlcl9wcm9ncmFtIiwib2xkX3RpbWVzdGFtcCIsInJnX25vaXNlIiwidG90YWxfdGltZSIsImJvcm5fcGFydGljbGVzIiwiYmlydGhfcmF0ZSIsIm9yaWdpbiIsImZvcmNlX2ZpZWxkIiwidXBkYXRlVmVydCIsInBhc3NUaHJ1RnJhZyIsInJlbmRlckZyYWciLCJyZW5kZXJWZXJ0IiwicGFydGljbGVTeXN0ZW1zIiwiZ2VuZXJhdGVQYXJ0aWNsZVN5c3RlbSIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0Q29udGV4dCIsImNyZWF0ZUNhbnZhcyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIkltYWdlIiwiVUlEIiwidGV4dCIsInBvc3NpYmxlIiwiZ2VuZXJhdGVVSUQiLCJ1c2VyU3lzdGVtIiwib25tb3VzZW1vdmUiLCJwYWdlWCIsIm9mZnNldExlZnQiLCJwYWdlWSIsIm9mZnNldFRvcCIsInVpZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRyYXciLCJ1c2VycyIsInVzZXIiLCJhc3NpZ24iLCJ0aW1lc3RhbXBfbWlsbGlzIiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsInBzIiwicGFydGljbGVTeXN0ZW0iLCJudW1fcGFydCIsInRpbWVfZGVsdGEiLCJ1c2VQcm9ncmFtIiwidW5pZm9ybTFmIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybTJmIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwidW5pZm9ybTFpIiwiVEVYVFVSRTEiLCJiaW5kQnVmZmVyQmFzZSIsIlRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVIiLCJSQVNURVJJWkVSX0RJU0NBUkQiLCJiZWdpblRyYW5zZm9ybUZlZWRiYWNrIiwiUE9JTlRTIiwiZHJhd0FycmF5cyIsImVuZFRyYW5zZm9ybUZlZWRiYWNrIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDaEQsR0FBc0IsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsU0FDYixHQUFxQixtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILE9BQ1AsQ0FDSixJQUFJSyxFQUFJTCxJQUNSLElBQUksSUFBSU0sS0FBS0QsR0FBdUIsaUJBQVpKLFFBQXVCQSxRQUFVRixHQUFNTyxHQUFLRCxFQUFFQyxJQVB4RSxDQVNHQyxRQUFRLFdBQ1gsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVULFFBR25DLElBQUlDLEVBQVNNLEVBQWlCRSxHQUFZLENBQ3pDSixFQUFHSSxFQUNIQyxHQUFHLEVBQ0hWLFFBQVMsSUFVVixPQU5BVyxFQUFRRixHQUFVRyxLQUFLWCxFQUFPRCxRQUFTQyxFQUFRQSxFQUFP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c0UsRUFBZXpDLFVBQzdDNUcsRUFBRzhKLFVBQ0M5SixFQUFHMEosbUJBQW1CTCxFQUFlNUMsd0JBQXlCLGFBQzlELEdBQ0p6RyxFQUFHNEosY0FBYzVKLEVBQUcrSixVQUNwQi9KLEVBQUc4RSxZQUFZOUUsRUFBRytFLFdBQVlzRSxFQUFlcEMsYUFDN0NqSCxFQUFHOEosVUFDQzlKLEVBQUcwSixtQkFBbUJMLEVBQWU1Qyx3QkFBeUIsZ0JBQzlELEdBS0p6RyxFQUFHNEIsZ0JBQWdCeUgsRUFBZTdDLGtCQUFrQjZDLEVBQWV2eEIsT0FJbkVrb0IsRUFBR2dLLGVBQ0NoSyxFQUFHaUssMEJBQTJCLEVBQUdaLEVBQWU5QyxxQkFBcUI4QyxFQUFldnpCLFFBSXhGa3FCLEVBQUd0UixPQUFPc1IsRUFBR2tLLG9CQUdibEssRUFBR21LLHVCQUF1Qm5LLEVBQUdvSyxRQUM3QnBLLEVBQUdxSyxXQUFXckssRUFBR29LLE9BQVEsRUFBR2QsR0FDNUJ0SixFQUFHc0ssdUJBQ0h0SyxFQUFHelIsUUFBUXlSLEVBQUdrSyxvQkFFZGxLLEVBQUdnSyxlQUFlaEssRUFBR2lLLDBCQUEyQixFQUFHLE1BS25EakssRUFBRzRCLGdCQUFnQnlILEVBQWU3QyxrQkFBa0I2QyxFQUFldnhCLEtBQU8sSUFDMUVrb0IsRUFBR3dKLFdBQVdILEVBQWUzQyx5QkFDN0IxRyxFQUFHcUssV0FBV3JLLEVBQUdvSyxPQUFRLEVBQUdkLEdBSTVCLElBQUk3WSxFQUFNNFksRUFBZXZ4QixLQUN6QnV4QixFQUFldnhCLEtBQU91eEIsRUFBZXZ6QixNQUNyQ3V6QixFQUFldnpCLE1BQVEyYSxHQXBIbkI4WixDQUFPdkssRUFBSXNILEVBQWlCcmMsR0FDNUIzb0IsT0FBT3FtQyxzQkFBc0JDIiwiZmlsZSI6Im1haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYwKTtcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG5cdC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdHJldHVybiB0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcgJiZcblx0XHRjb25zb2xlLmxvZyAmJlxuXHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xudmFyIGhhc0JpbmFyeSA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgc2xpY2VCdWZmZXIgPSByZXF1aXJlKCdhcnJheWJ1ZmZlci5zbGljZScpO1xudmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTtcbnZhciB1dGY4ID0gcmVxdWlyZSgnLi91dGY4Jyk7XG5cbnZhciBiYXNlNjRlbmNvZGVyO1xuaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgYmFzZTY0ZW5jb2RlciA9IHJlcXVpcmUoJ2Jhc2U2NC1hcnJheWJ1ZmZlcicpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGFuIGFuZHJvaWQgYnJvd3Nlci4gVGhhdCByZXF1aXJlcyB1cyB0byB1c2VcbiAqIEFycmF5QnVmZmVyIHdpdGggcG9sbGluZyB0cmFuc3BvcnRzLi4uXG4gKlxuICogaHR0cDovL2doaW5kYS5uZXQvanBlZy1ibG9iLWFqYXgtYW5kcm9pZC9cbiAqL1xuXG52YXIgaXNBbmRyb2lkID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGluIFBoYW50b21KUy5cbiAqIFVwbG9hZGluZyBhIEJsb2Igd2l0aCBQaGFudG9tSlMgZG9lcyBub3Qgd29yayBjb3JyZWN0bHksIGFzIHJlcG9ydGVkIGhlcmU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xMTM5NVxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgaXNQaGFudG9tSlMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvUGhhbnRvbUpTL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBXaGVuIHRydWUsIGF2b2lkcyB1c2luZyBCbG9icyB0byBlbmNvZGUgcGF5bG9hZHMuXG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBkb250U2VuZEJsb2JzID0gaXNBbmRyb2lkIHx8IGlzUGhhbnRvbUpTO1xuXG4vKipcbiAqIEN1cnJlbnQgcHJvdG9jb2wgdmVyc2lvbi5cbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKi9cblxudmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7XG4gICAgb3BlbjogICAgIDAgICAgLy8gbm9uLXdzXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXG4gICwgcGluZzogICAgIDJcbiAgLCBwb25nOiAgICAgM1xuICAsIG1lc3NhZ2U6ICA0XG4gICwgdXBncmFkZTogIDVcbiAgLCBub29wOiAgICAgNlxufTtcblxudmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTtcblxuLyoqXG4gKiBQcmVtYWRlIGVycm9yIHBhY2tldC5cbiAqL1xuXG52YXIgZXJyID0geyB0eXBlOiAnZXJyb3InLCBkYXRhOiAncGFyc2VyIGVycm9yJyB9O1xuXG4vKipcbiAqIENyZWF0ZSBhIGJsb2IgYXBpIGV2ZW4gZm9yIGJsb2IgYnVpbGRlciB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxuICovXG5cbnZhciBCbG9iID0gcmVxdWlyZSgnYmxvYicpO1xuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQuXG4gKlxuICogICAgIDxwYWNrZXQgdHlwZSBpZD4gWyA8ZGF0YT4gXVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDVoZWxsbyB3b3JsZFxuICogICAgIDNcbiAqICAgICA0XG4gKlxuICogQmluYXJ5IGlzIGVuY29kZWQgaW4gYW4gaWRlbnRpY2FsIHByaW5jaXBsZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHV0ZjhlbmNvZGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHV0ZjhlbmNvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XG4gICAgdXRmOGVuY29kZSA9IG51bGw7XG4gIH1cblxuICB2YXIgZGF0YSA9IChwYWNrZXQuZGF0YSA9PT0gdW5kZWZpbmVkKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nXG4gIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07XG5cbiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxuICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcblxufTtcblxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spIHtcbiAgLy8gcGFja2V0IGRhdGEgaXMgYW4gb2JqZWN0IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBoZWxwZXJzIGZvciBiaW5hcnkgdHlwZXNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgcmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0QnVmZmVyW2krMV0gPSBjb250ZW50QXJyYXlbaV07XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2socmVzdWx0QnVmZmVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldCh7IHR5cGU6IHBhY2tldC50eXBlLCBkYXRhOiBmci5yZXN1bHQgfSwgc3VwcG9ydHNCaW5hcnksIHRydWUsIGNhbGxiYWNrKTtcbiAgfTtcbiAgcmV0dXJuIGZyLnJlYWRBc0FycmF5QnVmZmVyKHBhY2tldC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKGRvbnRTZW5kQmxvYnMpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IG5ldyBVaW50OEFycmF5KDEpO1xuICBsZW5ndGhbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgdmFyIGJsb2IgPSBuZXcgQmxvYihbbGVuZ3RoLmJ1ZmZlciwgcGFja2V0LmRhdGFdKTtcblxuICByZXR1cm4gY2FsbGJhY2soYmxvYik7XG59XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldCB3aXRoIGJpbmFyeSBkYXRhIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQsIGhhcyBgdHlwZWAgYW5kIGBkYXRhYFxuICogQHJldHVybiB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBwYWNrZXQuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGI2NCA9IGZyLnJlc3VsdC5zcGxpdCgnLCcpWzFdO1xuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XG4gICAgfTtcbiAgICByZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSk7XG4gIH1cblxuICB2YXIgYjY0ZGF0YTtcbiAgdHJ5IHtcbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcbiAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7XG4gICAgdmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzaWNbaV0gPSB0eXBlZFtpXTtcbiAgICB9XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xuICB9XG4gIG1lc3NhZ2UgKz0gYnRvYShiNjRkYXRhKTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0LiBDaGFuZ2VzIGZvcm1hdCB0byBCbG9iIGlmIHJlcXVlc3RlZC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZGVjb2RlUGFja2V0ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIHV0ZjhkZWNvZGUpIHtcbiAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnI7XG4gIH1cbiAgLy8gU3RyaW5nIGRhdGFcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGlmIChkYXRhLmNoYXJBdCgwKSA9PT0gJ2InKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQoZGF0YS5zdWJzdHIoMSksIGJpbmFyeVR5cGUpO1xuICAgIH1cblxuICAgIGlmICh1dGY4ZGVjb2RlKSB7XG4gICAgICBkYXRhID0gdHJ5RGVjb2RlKGRhdGEpO1xuICAgICAgaWYgKGRhdGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciB0eXBlID0gZGF0YS5jaGFyQXQoMCk7XG5cbiAgICBpZiAoTnVtYmVyKHR5cGUpICE9IHR5cGUgfHwgIXBhY2tldHNsaXN0W3R5cGVdKSB7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiBkYXRhLnN1YnN0cmluZygxKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBhc0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciB0eXBlID0gYXNBcnJheVswXTtcbiAgdmFyIHJlc3QgPSBzbGljZUJ1ZmZlcihkYXRhLCAxKTtcbiAgaWYgKEJsb2IgJiYgYmluYXJ5VHlwZSA9PT0gJ2Jsb2InKSB7XG4gICAgcmVzdCA9IG5ldyBCbG9iKFtyZXN0XSk7XG4gIH1cbiAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IHJlc3QgfTtcbn07XG5cbmZ1bmN0aW9uIHRyeURlY29kZShkYXRhKSB7XG4gIHRyeSB7XG4gICAgZGF0YSA9IHV0ZjguZGVjb2RlKGRhdGEsIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0IGVuY29kZWQgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICovXG5cbmV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24obXNnLCBiaW5hcnlUeXBlKSB7XG4gIHZhciB0eXBlID0gcGFja2V0c2xpc3RbbXNnLmNoYXJBdCgwKV07XG4gIGlmICghYmFzZTY0ZW5jb2Rlcikge1xuICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBtc2cuc3Vic3RyKDEpIH0gfTtcbiAgfVxuXG4gIHZhciBkYXRhID0gYmFzZTY0ZW5jb2Rlci5kZWNvZGUobXNnLnN1YnN0cigxKSk7XG5cbiAgaWYgKGJpbmFyeVR5cGUgPT09ICdibG9iJyAmJiBCbG9iKSB7XG4gICAgZGF0YSA9IG5ldyBCbG9iKFtkYXRhXSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiBkYXRhIH07XG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpLlxuICpcbiAqICAgICA8bGVuZ3RoPjpkYXRhXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgMTE6aGVsbG8gd29ybGQyOmhpXG4gKlxuICogSWYgYW55IGNvbnRlbnRzIGFyZSBiaW5hcnksIHRoZXkgd2lsbCBiZSBlbmNvZGVkIGFzIGJhc2U2NCBzdHJpbmdzLiBCYXNlNjRcbiAqIGVuY29kZWQgc3RyaW5ncyBhcmUgbWFya2VkIHdpdGggYSBiIGJlZm9yZSB0aGUgbGVuZ3RoIHNwZWNpZmllclxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChwYWNrZXRzLCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBudWxsO1xuICB9XG5cbiAgdmFyIGlzQmluYXJ5ID0gaGFzQmluYXJ5KHBhY2tldHMpO1xuXG4gIGlmIChzdXBwb3J0c0JpbmFyeSAmJiBpc0JpbmFyeSkge1xuICAgIGlmIChCbG9iICYmICFkb250U2VuZEJsb2JzKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcihwYWNrZXRzLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCcwOicpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbWVzc2FnZS5sZW5ndGggKyAnOicgKyBtZXNzYWdlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCAhaXNCaW5hcnkgPyBmYWxzZSA6IHN1cHBvcnRzQmluYXJ5LCBmYWxzZSwgZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0cy5qb2luKCcnKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBc3luYyBhcnJheSBtYXAgdXNpbmcgYWZ0ZXJcbiAqL1xuXG5mdW5jdGlvbiBtYXAoYXJ5LCBlYWNoLCBkb25lKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoYXJ5Lmxlbmd0aCk7XG4gIHZhciBuZXh0ID0gYWZ0ZXIoYXJ5Lmxlbmd0aCwgZG9uZSk7XG5cbiAgdmFyIGVhY2hXaXRoSW5kZXggPSBmdW5jdGlvbihpLCBlbCwgY2IpIHtcbiAgICBlYWNoKGVsLCBmdW5jdGlvbihlcnJvciwgbXNnKSB7XG4gICAgICByZXN1bHRbaV0gPSBtc2c7XG4gICAgICBjYihlcnJvciwgcmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGVhY2hXaXRoSW5kZXgoaSwgYXJ5W2ldLCBuZXh0KTtcbiAgfVxufVxuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBQb3NzaWJsZSBiaW5hcnkgY29udGVudHMgYXJlXG4gKiBkZWNvZGVkIGZyb20gdGhlaXIgYmFzZTY0IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBleHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeShkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgcGFja2V0O1xuICBpZiAoZGF0YSA9PT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gJycsIG4sIG1zZztcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpO1xuXG4gICAgaWYgKGNociAhPT0gJzonKSB7XG4gICAgICBsZW5ndGggKz0gY2hyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gJycgfHwgKGxlbmd0aCAhPSAobiA9IE51bWJlcihsZW5ndGgpKSkpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIG1zZyA9IGRhdGEuc3Vic3RyKGkgKyAxLCBuKTtcblxuICAgIGlmIChsZW5ndGggIT0gbXNnLmxlbmd0aCkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgaWYgKG1zZy5sZW5ndGgpIHtcbiAgICAgIHBhY2tldCA9IGV4cG9ydHMuZGVjb2RlUGFja2V0KG1zZywgYmluYXJ5VHlwZSwgZmFsc2UpO1xuXG4gICAgICBpZiAoZXJyLnR5cGUgPT09IHBhY2tldC50eXBlICYmIGVyci5kYXRhID09PSBwYWNrZXQuZGF0YSkge1xuICAgICAgICAvLyBwYXJzZXIgZXJyb3IgaW4gaW5kaXZpZHVhbCBwYWNrZXQgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmV0ID0gY2FsbGJhY2socGFja2V0LCBpICsgbiwgbCk7XG4gICAgICBpZiAoZmFsc2UgPT09IHJldCkgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFkdmFuY2UgY3Vyc29yXG4gICAgaSArPSBuO1xuICAgIGxlbmd0aCA9ICcnO1xuICB9XG5cbiAgaWYgKGxlbmd0aCAhPT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKSBhcyBiaW5hcnkuXG4gKlxuICogPDEgPSBiaW5hcnksIDAgPSBzdHJpbmc+PG51bWJlciBmcm9tIDAtOT48bnVtYmVyIGZyb20gMC05PlsuLi5dPG51bWJlclxuICogMjU1PjxkYXRhPlxuICpcbiAqIEV4YW1wbGU6XG4gKiAxIDMgMjU1IDEgMiAzLCBpZiB0aGUgYmluYXJ5IGNvbnRlbnRzIGFyZSBpbnRlcnByZXRlZCBhcyA4IGJpdCBpbnRlZ2Vyc1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBlbmNvZGVkIHBheWxvYWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBBcnJheUJ1ZmZlcigwKSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBkb25lQ2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIGVuY29kZWRQYWNrZXRzKSB7XG4gICAgdmFyIHRvdGFsTGVuZ3RoID0gZW5jb2RlZFBhY2tldHMucmVkdWNlKGZ1bmN0aW9uKGFjYywgcCkge1xuICAgICAgdmFyIGxlbjtcbiAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpe1xuICAgICAgICBsZW4gPSBwLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbiA9IHAuYnl0ZUxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2MgKyBsZW4udG9TdHJpbmcoKS5sZW5ndGggKyBsZW4gKyAyOyAvLyBzdHJpbmcvYmluYXJ5IGlkZW50aWZpZXIgKyBzZXBhcmF0b3IgPSAyXG4gICAgfSwgMCk7XG5cbiAgICB2YXIgcmVzdWx0QXJyYXkgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCk7XG5cbiAgICB2YXIgYnVmZmVySW5kZXggPSAwO1xuICAgIGVuY29kZWRQYWNrZXRzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIHAgPT09ICdzdHJpbmcnO1xuICAgICAgdmFyIGFiID0gcDtcbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KHAubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IHAuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBhYiA9IHZpZXcuYnVmZmVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJpbmcpIHsgLy8gbm90IHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMDtcbiAgICAgIH0gZWxzZSB7IC8vIHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlblN0ciA9IGFiLmJ5dGVMZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMjU1O1xuXG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGFiKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHZpZXdbaV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0QXJyYXkuYnVmZmVyKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEVuY29kZSBhcyBCbG9iXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihlbmNvZGVkKSB7XG4gICAgICB2YXIgYmluYXJ5SWRlbnRpZmllciA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDE7XG4gICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gZW5jb2RlZC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGVuY29kZWQgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW4gPSAoZW5jb2RlZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICA/IGVuY29kZWQuYnl0ZUxlbmd0aFxuICAgICAgICA6IGVuY29kZWQuc2l6ZTtcblxuICAgICAgdmFyIGxlblN0ciA9IGxlbi50b1N0cmluZygpO1xuICAgICAgdmFyIGxlbmd0aEFyeSA9IG5ldyBVaW50OEFycmF5KGxlblN0ci5sZW5ndGggKyAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxlbmd0aEFyeVtpXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICBsZW5ndGhBcnlbbGVuU3RyLmxlbmd0aF0gPSAyNTU7XG5cbiAgICAgIGlmIChCbG9iKSB7XG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2JpbmFyeUlkZW50aWZpZXIuYnVmZmVyLCBsZW5ndGhBcnkuYnVmZmVyLCBlbmNvZGVkXSk7XG4gICAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBibG9iKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQmxvYihyZXN1bHRzKSk7XG4gIH0pO1xufTtcblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gU3RyaW5ncyBhcmUgZGVjb2RlZCBieVxuICogaW50ZXJwcmV0aW5nIGVhY2ggYnl0ZSBhcyBhIGtleSBjb2RlIGZvciBlbnRyaWVzIG1hcmtlZCB0byBzdGFydCB3aXRoIDAuIFNlZVxuICogZGVzY3JpcHRpb24gb2YgZW5jb2RlUGF5bG9hZEFzQmluYXJ5XG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBidWZmZXJUYWlsID0gZGF0YTtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcblxuICB3aGlsZSAoYnVmZmVyVGFpbC5ieXRlTGVuZ3RoID4gMCkge1xuICAgIHZhciB0YWlsQXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXJUYWlsKTtcbiAgICB2YXIgaXNTdHJpbmcgPSB0YWlsQXJyYXlbMF0gPT09IDA7XG4gICAgdmFyIG1zZ0xlbmd0aCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IDsgaSsrKSB7XG4gICAgICBpZiAodGFpbEFycmF5W2ldID09PSAyNTUpIGJyZWFrO1xuXG4gICAgICAvLyAzMTAgPSBjaGFyIGxlbmd0aCBvZiBOdW1iZXIuTUFYX1ZBTFVFXG4gICAgICBpZiAobXNnTGVuZ3RoLmxlbmd0aCA+IDMxMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgbXNnTGVuZ3RoICs9IHRhaWxBcnJheVtpXTtcbiAgICB9XG5cbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMiArIG1zZ0xlbmd0aC5sZW5ndGgpO1xuICAgIG1zZ0xlbmd0aCA9IHBhcnNlSW50KG1zZ0xlbmd0aCk7XG5cbiAgICB2YXIgbXNnID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMCwgbXNnTGVuZ3RoKTtcbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG1zZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkobXNnKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHRvIHR5cGVkIGFycmF5c1xuICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShtc2cpO1xuICAgICAgICBtc2cgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1zZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHR5cGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGJ1ZmZlcnMucHVzaChtc2cpO1xuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCBtc2dMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRvdGFsID0gYnVmZmVycy5sZW5ndGg7XG4gIGJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbihidWZmZXIsIGkpIHtcbiAgICBjYWxsYmFjayhleHBvcnRzLmRlY29kZVBhY2tldChidWZmZXIsIGJpbmFyeVR5cGUsIHRydWUpLCBpLCB0b3RhbCk7XG4gIH0pO1xufTtcbiIsIi8qKlxyXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXHJcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gIHZhciBzdHIgPSAnJztcclxuXHJcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XHJcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzdHI7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcclxuICB2YXIgcXJ5ID0ge307XHJcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcclxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xyXG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XHJcbiAgfVxyXG4gIHJldHVybiBxcnk7XHJcbn07XHJcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhLCBiKXtcbiAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgZm47XG4gIGEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYTtcbn07IiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHVybCA9IHJlcXVpcmUoJy4vdXJsJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIE1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBsb29rdXA7XG5cbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cblxudmFyIGNhY2hlID0gZXhwb3J0cy5tYW5hZ2VycyA9IHt9O1xuXG4vKipcbiAqIExvb2tzIHVwIGFuIGV4aXN0aW5nIGBNYW5hZ2VyYCBmb3IgbXVsdGlwbGV4aW5nLlxuICogSWYgdGhlIHVzZXIgc3VtbW9uczpcbiAqXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9hJyk7YFxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYicpO2BcbiAqXG4gKiBXZSByZXVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UgYmFzZWQgb24gc2FtZSBzY2hlbWUvcG9ydC9ob3N0LFxuICogYW5kIHdlIGluaXRpYWxpemUgc29ja2V0cyBmb3IgZWFjaCBuYW1lc3BhY2UuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb29rdXAgKHVyaSwgb3B0cykge1xuICBpZiAodHlwZW9mIHVyaSA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRzID0gdXJpO1xuICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIHZhciBwYXJzZWQgPSB1cmwodXJpKTtcbiAgdmFyIHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XG4gIHZhciBpZCA9IHBhcnNlZC5pZDtcbiAgdmFyIHBhdGggPSBwYXJzZWQucGF0aDtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF0ubnNwcztcbiAgdmFyIG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8IG9wdHNbJ2ZvcmNlIG5ldyBjb25uZWN0aW9uJ10gfHxcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHwgc2FtZU5hbWVzcGFjZTtcblxuICB2YXIgaW87XG5cbiAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICBkZWJ1ZygnaWdub3Jpbmcgc29ja2V0IGNhY2hlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgaW8gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjYWNoZVtpZF0pIHtcbiAgICAgIGRlYnVnKCduZXcgaW8gaW5zdGFuY2UgZm9yICVzJywgc291cmNlKTtcbiAgICAgIGNhY2hlW2lkXSA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICB9XG4gICAgaW8gPSBjYWNoZVtpZF07XG4gIH1cbiAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgIG9wdHMucXVlcnkgPSBwYXJzZWQucXVlcnk7XG4gIH1cbiAgcmV0dXJuIGlvLnNvY2tldChwYXJzZWQucGF0aCwgb3B0cyk7XG59XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7XG5cbi8qKlxuICogYGNvbm5lY3RgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5jb25uZWN0ID0gbG9va3VwO1xuXG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLk1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTtcbmV4cG9ydHMuU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBiaW5hcnkgPSByZXF1aXJlKCcuL2JpbmFyeScpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnR5cGVzID0gW1xuICAnQ09OTkVDVCcsXG4gICdESVNDT05ORUNUJyxcbiAgJ0VWRU5UJyxcbiAgJ0FDSycsXG4gICdFUlJPUicsXG4gICdCSU5BUllfRVZFTlQnLFxuICAnQklOQVJZX0FDSydcbl07XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGNvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5DT05ORUNUID0gMDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZGlzY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRJU0NPTk5FQ1QgPSAxO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBldmVudGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVWRU5UID0gMjtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYWNrYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQUNLID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXJyb3JgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FUlJPUiA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgJ2JpbmFyeSBldmVudCdcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0VWRU5UID0gNTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgYmluYXJ5IGFja2AuIEZvciBhY2tzIHdpdGggYmluYXJ5IGFyZ3VtZW50cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQklOQVJZX0FDSyA9IDY7XG5cbi8qKlxuICogRW5jb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7XG5cbi8qKlxuICogRGVjb2RlciBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRGVjb2RlciA9IERlY29kZXI7XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZVxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRW5jb2RlcigpIHt9XG5cbnZhciBFUlJPUl9QQUNLRVQgPSBleHBvcnRzLkVSUk9SICsgJ1wiZW5jb2RlIGVycm9yXCInO1xuXG4vKipcbiAqIEVuY29kZSBhIHBhY2tldCBhcyBhIHNpbmdsZSBzdHJpbmcgaWYgbm9uLWJpbmFyeSwgb3IgYXMgYVxuICogYnVmZmVyIHNlcXVlbmNlLCBkZXBlbmRpbmcgb24gcGFja2V0IHR5cGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHBhY2tldCBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gaGFuZGxlIGVuY29kaW5ncyAobGlrZWx5IGVuZ2luZS53cml0ZSlcbiAqIEByZXR1cm4gQ2FsbHMgY2FsbGJhY2sgd2l0aCBBcnJheSBvZiBlbmNvZGluZ3NcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24ob2JqLCBjYWxsYmFjayl7XG4gIGRlYnVnKCdlbmNvZGluZyBwYWNrZXQgJWonLCBvYmopO1xuXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHZhciBlbmNvZGluZyA9IGVuY29kZUFzU3RyaW5nKG9iaik7XG4gICAgY2FsbGJhY2soW2VuY29kaW5nXSk7XG4gIH1cbn07XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc1N0cmluZyhvYmopIHtcblxuICAvLyBmaXJzdCBpcyB0eXBlXG4gIHZhciBzdHIgPSAnJyArIG9iai50eXBlO1xuXG4gIC8vIGF0dGFjaG1lbnRzIGlmIHdlIGhhdmUgdGhlbVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzICsgJy0nO1xuICB9XG5cbiAgLy8gaWYgd2UgaGF2ZSBhIG5hbWVzcGFjZSBvdGhlciB0aGFuIGAvYFxuICAvLyB3ZSBhcHBlbmQgaXQgZm9sbG93ZWQgYnkgYSBjb21tYSBgLGBcbiAgaWYgKG9iai5uc3AgJiYgJy8nICE9PSBvYmoubnNwKSB7XG4gICAgc3RyICs9IG9iai5uc3AgKyAnLCc7XG4gIH1cblxuICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWRcbiAgaWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgc3RyICs9IG9iai5pZDtcbiAgfVxuXG4gIC8vIGpzb24gZGF0YVxuICBpZiAobnVsbCAhPSBvYmouZGF0YSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5U3RyaW5naWZ5KG9iai5kYXRhKTtcbiAgICBpZiAocGF5bG9hZCAhPT0gZmFsc2UpIHtcbiAgICAgIHN0ciArPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRVJST1JfUEFDS0VUO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdlbmNvZGVkICVqIGFzICVzJywgb2JqLCBzdHIpO1xuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiB0cnlTdHJpbmdpZnkoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kXG4gKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kXG4gKiBhIGxpc3Qgb2YgYnVmZmVycy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spIHtcblxuICBmdW5jdGlvbiB3cml0ZUVuY29kaW5nKGJsb2JsZXNzRGF0YSkge1xuICAgIHZhciBkZWNvbnN0cnVjdGlvbiA9IGJpbmFyeS5kZWNvbnN0cnVjdFBhY2tldChibG9ibGVzc0RhdGEpO1xuICAgIHZhciBwYWNrID0gZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTtcbiAgICB2YXIgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7XG5cbiAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0XG4gICAgY2FsbGJhY2soYnVmZmVycyk7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVyc1xuICB9XG5cbiAgYmluYXJ5LnJlbW92ZUJsb2JzKG9iaiwgd3JpdGVFbmNvZGluZyk7XG59XG5cbi8qKlxuICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBEZWNvZGVyKCkge1xuICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAgd2l0aCBEZWNvZGVyLlxuICovXG5cbkVtaXR0ZXIoRGVjb2Rlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERlY29kZXMgYW4gZW5jb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHBhY2tldDtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcGFja2V0ID0gZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwYWNrZXQudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHBhY2tldC50eXBlKSB7IC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO1xuXG4gICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvci5yZWNvblBhY2suYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0J1ZihvYmopIHx8IG9iai5iYXNlNjQpIHsgLy8gcmF3IGJpbmFyeSBkYXRhXG4gICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY2tldCA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YShvYmopO1xuICAgICAgaWYgKHBhY2tldCkgeyAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGU6ICcgKyBvYmopO1xuICB9XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikge1xuICB2YXIgaSA9IDA7XG4gIC8vIGxvb2sgdXAgdHlwZVxuICB2YXIgcCA9IHtcbiAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSlcbiAgfTtcblxuICBpZiAobnVsbCA9PSBleHBvcnRzLnR5cGVzW3AudHlwZV0pIHtcbiAgICByZXR1cm4gZXJyb3IoJ3Vua25vd24gcGFja2V0IHR5cGUgJyArIHAudHlwZSk7XG4gIH1cblxuICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcC50eXBlKSB7XG4gICAgdmFyIGJ1ZiA9ICcnO1xuICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09ICctJykge1xuICAgICAgYnVmICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgaWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9PSAnLScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBhdHRhY2htZW50cycpO1xuICAgIH1cbiAgICBwLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gIH1cblxuICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICBpZiAoJy8nID09PSBzdHIuY2hhckF0KGkgKyAxKSkge1xuICAgIHAubnNwID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKCcsJyA9PT0gYykgYnJlYWs7XG4gICAgICBwLm5zcCArPSBjO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwLm5zcCA9ICcvJztcbiAgfVxuXG4gIC8vIGxvb2sgdXAgaWRcbiAgdmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgaWYgKCcnICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgcC5pZCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgLS1pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHAuaWQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgcC5pZCA9IE51bWJlcihwLmlkKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgIHZhciBpc1BheWxvYWRWYWxpZCA9IHBheWxvYWQgIT09IGZhbHNlICYmIChwLnR5cGUgPT09IGV4cG9ydHMuRVJST1IgfHwgaXNBcnJheShwYXlsb2FkKSk7XG4gICAgaWYgKGlzUGF5bG9hZFZhbGlkKSB7XG4gICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3IoJ2ludmFsaWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdkZWNvZGVkICVzIGFzICVqJywgc3RyLCBwKTtcbiAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufVxuXG4vKipcbiAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAqICAgYSByZWNvbnN0cnVjdGVkIHBhY2tldCBvYmplY3QgaWYgYWxsIGJ1ZmZlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbihiaW5EYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHsgLy8gZG9uZSB3aXRoIGJ1ZmZlciBsaXN0XG4gICAgdmFyIHBhY2tldCA9IGJpbmFyeS5yZWNvbnN0cnVjdFBhY2tldCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICByZXR1cm4gcGFja2V0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufTtcblxuZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZXhwb3J0cy5FUlJPUixcbiAgICBkYXRhOiAncGFyc2VyIGVycm9yOiAnICsgbXNnXG4gIH07XG59XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuL2dsb2JhbFRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICB2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTtcblxuICAvLyBYRG9tYWluUmVxdWVzdCBoYXMgYSBmbG93IG9mIG5vdCBzZW5kaW5nIGNvb2tpZSwgdGhlcmVmb3JlIGl0IHNob3VsZCBiZSBkaXNhYmxlZCBhcyBhIGRlZmF1bHQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2VuZ2luZS5pby1jbGllbnQvcHVsbC8yMTdcbiAgdmFyIGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICAvLyBVc2UgWERvbWFpblJlcXVlc3QgZm9yIElFOCBpZiBlbmFibGVzWERSIGlzIHRydWVcbiAgLy8gYmVjYXVzZSBsb2FkaW5nIGJhciBrZWVwcyBmbGFzaGluZyB3aGVuIHVzaW5nIGpzb25wLXBvbGxpbmdcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3l1amlvc2FrYS9zb2NrZS5pby1pZTgtbG9hZGluZy1leGFtcGxlXG4gIHRyeSB7XG4gICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpc1tbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xuICB9XG59KSgpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIHJlc3VsdHMgb2YgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9IG9wdHMuaXNSZWFjdE5hdGl2ZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLyoqXHJcbiAqIFBhcnNlcyBhbiBVUklcclxuICpcclxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHJcbnZhciBwYXJ0cyA9IFtcclxuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xyXG5dO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcclxuICAgIHZhciBzcmMgPSBzdHIsXHJcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXHJcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXHJcbiAgICAgICAgdXJpID0ge30sXHJcbiAgICAgICAgaSA9IDE0O1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcclxuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVyaTtcclxufTtcclxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbnZhciB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iaikgOiAob2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAgICAgICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhvYmopKSk7XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZWlvID0gcmVxdWlyZSgnZW5naW5lLmlvLWNsaWVudCcpO1xudmFyIFNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIG9uID0gcmVxdWlyZSgnLi9vbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdjb21wb25lbnQtYmluZCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDptYW5hZ2VyJyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja28yJyk7XG5cbi8qKlxuICogSUU2KyBoYXNPd25Qcm9wZXJ0eVxuICovXG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNYW5hZ2VyO1xuXG4vKipcbiAqIGBNYW5hZ2VyYCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5naW5lIGluc3RhbmNlIG9yIGVuZ2luZSB1cmkvb3B0c1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWFuYWdlciAodXJpLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYW5hZ2VyKSkgcmV0dXJuIG5ldyBNYW5hZ2VyKHVyaSwgb3B0cyk7XG4gIGlmICh1cmkgJiYgKCdvYmplY3QnID09PSB0eXBlb2YgdXJpKSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCAnL3NvY2tldC5pbyc7XG4gIHRoaXMubnNwcyA9IHt9O1xuICB0aGlzLnN1YnMgPSBbXTtcbiAgdGhpcy5vcHRzID0gb3B0cztcbiAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgMC41KTtcbiAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKClcbiAgfSk7XG4gIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMudXJpID0gdXJpO1xuICB0aGlzLmNvbm5lY3RpbmcgPSBbXTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdmFyIF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICB0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGUgZ2l2ZW4gZXZlbnQgdG8gc29ja2V0cyBhbmQgZW1pdCBvbiBgdGhpc2BcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5lbWl0QWxsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmVtaXQuYXBwbHkodGhpcy5uc3BzW25zcF0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBgc29ja2V0LmlkYCBvZiBhbGwgc29ja2V0c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVNvY2tldElkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgbnNwIGluIHRoaXMubnNwcykge1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLm5zcHMsIG5zcCkpIHtcbiAgICAgIHRoaXMubnNwc1tuc3BdLmlkID0gdGhpcy5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdlbmVyYXRlIGBzb2NrZXQuaWRgIGZvciB0aGUgZ2l2ZW4gYG5zcGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbnNwXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKG5zcCkge1xuICByZXR1cm4gKG5zcCA9PT0gJy8nID8gJycgOiAobnNwICsgJyMnKSkgKyB0aGlzLmVuZ2luZS5pZDtcbn07XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgcmVjb25uZWN0aW9uYCBjb25maWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSB0cnVlL2ZhbHNlIGlmIGl0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHJlY29ubmVjdFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBjb25maWcuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cFxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWFuYWdlci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldEppdHRlcih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29ubmVjdGlvbiB0aW1lb3V0LiBgZmFsc2VgIHRvIGRpc2FibGVcbiAqXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUubWF5YmVSZWNvbm5lY3RPbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgaWYgKCF0aGlzLnJlY29ubmVjdGluZyAmJiB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9wZW4gPVxuTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbiwgb3B0cykge1xuICBkZWJ1ZygncmVhZHlTdGF0ZSAlcycsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIGlmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoJ29wZW4nKSkgcmV0dXJuIHRoaXM7XG5cbiAgZGVidWcoJ29wZW5pbmcgJXMnLCB0aGlzLnVyaSk7XG4gIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSBmYWxzZTtcblxuICAvLyBlbWl0IGBvcGVuYFxuICB2YXIgb3BlblN1YiA9IG9uKHNvY2tldCwgJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbm9wZW4oKTtcbiAgICBmbiAmJiBmbigpO1xuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X2Vycm9yYFxuICB2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsICdlcnJvcicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGVidWcoJ2Nvbm5lY3RfZXJyb3InKTtcbiAgICBzZWxmLmNsZWFudXAoKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfZXJyb3InLCBkYXRhKTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgIGVyci5kYXRhID0gZGF0YTtcbiAgICAgIGZuKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBlbWl0IGBjb25uZWN0X3RpbWVvdXRgXG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgWEhSID0gcmVxdWlyZSgnLi9wb2xsaW5nLXhocicpO1xudmFyIEpTT05QID0gcmVxdWlyZSgnLi9wb2xsaW5nLWpzb25wJyk7XG52YXIgd2Vic29ja2V0ID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnQgdHJhbnNwb3J0cy5cbiAqL1xuXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7XG5cbi8qKlxuICogUG9sbGluZyB0cmFuc3BvcnQgcG9seW1vcnBoaWMgY29uc3RydWN0b3IuXG4gKiBEZWNpZGVzIG9uIHhociB2cyBqc29ucCBiYXNlZCBvbiBmZWF0dXJlIGRldGVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nIChvcHRzKSB7XG4gIHZhciB4aHI7XG4gIHZhciB4ZCA9IGZhbHNlO1xuICB2YXIgeHMgPSBmYWxzZTtcbiAgdmFyIGpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIEJ1ZmZlci5pc0J1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAodHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaGFzQmluID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzIChibGFja2xpc3RlZCkuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZXZlbnRzID0ge1xuICBjb25uZWN0OiAxLFxuICBjb25uZWN0X2Vycm9yOiAxLFxuICBjb25uZWN0X3RpbWVvdXQ6IDEsXG4gIGNvbm5lY3Rpbmc6IDEsXG4gIGRpc2Nvbm5lY3Q6IDEsXG4gIGVycm9yOiAxLFxuICByZWNvbm5lY3Q6IDEsXG4gIHJlY29ubmVjdF9hdHRlbXB0OiAxLFxuICByZWNvbm5lY3RfZmFpbGVkOiAxLFxuICByZWNvbm5lY3RfZXJyb3I6IDEsXG4gIHJlY29ubmVjdGluZzogMSxcbiAgcGluZzogMSxcbiAgcG9uZzogMVxufTtcblxuLyoqXG4gKiBTaG9ydGN1dCB0byBgRW1pdHRlciNlbWl0YC5cbiAqL1xuXG52YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKGlvLCBuc3AsIG9wdHMpIHtcbiAgdGhpcy5pbyA9IGlvO1xuICB0aGlzLm5zcCA9IG5zcDtcbiAgdGhpcy5qc29uID0gdGhpczsgLy8gY29tcGF0XG4gIHRoaXMuaWRzID0gMDtcbiAgdGhpcy5hY2tzID0ge307XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmZsYWdzID0ge307XG4gIGlmIChvcHRzICYmIG9wdHMucXVlcnkpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgfVxuICBpZiAodGhpcy5pby5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc3ViRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSByZXR1cm47XG5cbiAgdmFyIGlvID0gdGhpcy5pbztcbiAgdGhpcy5zdWJzID0gW1xuICAgIG9uKGlvLCAnb3BlbicsIGJpbmQodGhpcywgJ29ub3BlbicpKSxcbiAgICBvbihpbywgJ3BhY2tldCcsIGJpbmQodGhpcywgJ29ucGFja2V0JykpLFxuICAgIG9uKGlvLCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpXG4gIF07XG59O1xuXG4vKipcbiAqIFwiT3BlbnNcIiB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vcGVuID1cblNvY2tldC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSByZXR1cm4gdGhpcztcblxuICB0aGlzLnN1YkV2ZW50cygpO1xuICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5pby5yZWFkeVN0YXRlKSB0aGlzLm9ub3BlbigpO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3RpbmcnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICBhcmdzLnVuc2hpZnQoJ21lc3NhZ2UnKTtcbiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3ZlcnJpZGUgYGVtaXRgLlxuICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldikpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgdmFyIHBhY2tldCA9IHtcbiAgICB0eXBlOiAodGhpcy5mbGFncy5iaW5hcnkgIT09IHVuZGVmaW5lZCA/IHRoaXMuZmxhZ3MuYmluYXJ5IDogaGFzQmluKGFyZ3MpKSA/IHBhcnNlci5CSU5BUllfRVZFTlQgOiBwYXJzZXIuRVZFTlQsXG4gICAgZGF0YTogYXJnc1xuICB9O1xuXG4gIHBhY2tldC5vcHRpb25zID0ge307XG4gIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gIXRoaXMuZmxhZ3MgfHwgZmFsc2UgIT09IHRoaXMuZmxhZ3MuY29tcHJlc3M7XG5cbiAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgZGVidWcoJ2VtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZCcsIHRoaXMuaWRzKTtcbiAgICB0aGlzLmFja3NbdGhpcy5pZHNdID0gYXJncy5wb3AoKTtcbiAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG5cbiAgdGhpcy5mbGFncyA9IHt9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICB0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygndHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nJyk7XG5cbiAgLy8gd3JpdGUgY29ubmVjdCBwYWNrZXQgaWYgbmVjZXNzYXJ5XG4gIGlmICgnLycgIT09IHRoaXMubnNwKSB7XG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyA/IHBhcnNlcXMuZW5jb2RlKHRoaXMucXVlcnkpIDogdGhpcy5xdWVyeTtcbiAgICAgIGRlYnVnKCdzZW5kaW5nIGNvbm5lY3QgcGFja2V0IHdpdGggcXVlcnkgJXMnLCBxdWVyeSk7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1R9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvblxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UgKCVzKScsIHJlYXNvbik7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMuaWQ7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgdmFyIHJvb3ROYW1lc3BhY2VFcnJvciA9IHBhY2tldC50eXBlID09PSBwYXJzZXIuRVJST1IgJiYgcGFja2V0Lm5zcCA9PT0gJy8nO1xuXG4gIGlmICghc2FtZU5hbWVzcGFjZSAmJiAhcm9vdE5hbWVzcGFjZUVycm9yKSByZXR1cm47XG5cbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkNPTk5FQ1Q6XG4gICAgICB0aGlzLm9uY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVJST1I6XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcGFja2V0LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICBkZWJ1ZygnZW1pdHRpbmcgZXZlbnQgJWonLCBhcmdzKTtcblxuICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICBkZWJ1ZygnYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudCcpO1xuICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goYXJncyk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzZW50ID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgaWYgKHNlbnQpIHJldHVybjtcbiAgICBzZW50ID0gdHJ1ZTtcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIHR5cGU6IGhhc0JpbihhcmdzKSA/IHBhcnNlci5CSU5BUllfQUNLIDogcGFyc2VyLkFDSyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIGRhdGE6IGFyZ3NcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFjaykge1xuICAgIGRlYnVnKCdjYWxsaW5nIGFjayAlcyB3aXRoICVqJywgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7XG4gICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2JhZCBhY2sgJXMnLCBwYWNrZXQuaWQpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xuICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xufTtcblxuLyoqXG4gKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGVtaXQuYXBwbHkodGhpcywgdGhpcy5yZWNlaXZlQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5wYWNrZXQodGhpcy5zZW5kQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICB0aGlzLmRlc3Ryb3koKTtcbiAgdGhpcy5vbmNsb3NlKCdpbyBzZXJ2ZXIgZGlzY29ubmVjdCcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmRcbiAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZS5cbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHtcbiAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vicy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdWJzW2ldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzID0gbnVsbDtcbiAgfVxuXG4gIHRoaXMuaW8uZGVzdHJveSh0aGlzKTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9XG5Tb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGRlYnVnKCdwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgdGhpcy5kZXN0cm95KCk7XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgLy8gZmlyZSBldmVudHNcbiAgICB0aGlzLm9uY2xvc2UoJ2lvIGNsaWVudCBkaXNjb25uZWN0Jyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoY29tcHJlc3MpIHtcbiAgdGhpcy5mbGFncy5jb21wcmVzcyA9IGNvbXByZXNzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgYmluYXJ5IGZsYWdcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIGVtaXR0ZWQgZGF0YSBjb250YWlucyBiaW5hcnlcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmJpbmFyeSA9IGZ1bmN0aW9uIChiaW5hcnkpIHtcbiAgdGhpcy5mbGFncy5iaW5hcnkgPSBiaW5hcnk7XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnVybCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xuXG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtPYmplY3R9IEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB1cmwgKHVyaSwgbG9jKSB7XG4gIHZhciBvYmogPSB1cmk7XG5cbiAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cbiAgbG9jID0gbG9jIHx8ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmIGxvY2F0aW9uKTtcbiAgaWYgKG51bGwgPT0gdXJpKSB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgbG9jLmhvc3Q7XG5cbiAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgIGRlYnVnKCdwcm90b2NvbC1sZXNzIHVybCAlcycsIHVyaSk7XG4gICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBsb2MpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9ICdodHRwczovLycgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFyc2VcbiAgICBkZWJ1ZygncGFyc2UgJXMnLCB1cmkpO1xuICAgIG9iaiA9IHBhcnNldXJpKHVyaSk7XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgaWYgKCFvYmoucG9ydCkge1xuICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnODAnO1xuICAgIH0gZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc0NDMnO1xuICAgIH1cbiAgfVxuXG4gIG9iai5wYXRoID0gb2JqLnBhdGggfHwgJy8nO1xuXG4gIHZhciBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZignOicpICE9PSAtMTtcbiAgdmFyIGhvc3QgPSBpcHY2ID8gJ1snICsgb2JqLmhvc3QgKyAnXScgOiBvYmouaG9zdDtcblxuICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gIG9iai5pZCA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArICc6JyArIG9iai5wb3J0O1xuICAvLyBkZWZpbmUgaHJlZlxuICBvYmouaHJlZiA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gJycgOiAoJzonICsgb2JqLnBvcnQpKTtcblxuICByZXR1cm4gb2JqO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0Ly8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdFx0Ly8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuXG5cdFx0Ly8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc3QgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZURlYnVnLmluc3RhbmNlc1tpXTtcblx0XHRcdGluc3RhbmNlLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJyMwMDAwQ0MnLCAnIzAwMDBGRicsICcjMDAzM0NDJywgJyMwMDMzRkYnLCAnIzAwNjZDQycsICcjMDA2NkZGJywgJyMwMDk5Q0MnLFxuICAnIzAwOTlGRicsICcjMDBDQzAwJywgJyMwMENDMzMnLCAnIzAwQ0M2NicsICcjMDBDQzk5JywgJyMwMENDQ0MnLCAnIzAwQ0NGRicsXG4gICcjMzMwMENDJywgJyMzMzAwRkYnLCAnIzMzMzNDQycsICcjMzMzM0ZGJywgJyMzMzY2Q0MnLCAnIzMzNjZGRicsICcjMzM5OUNDJyxcbiAgJyMzMzk5RkYnLCAnIzMzQ0MwMCcsICcjMzNDQzMzJywgJyMzM0NDNjYnLCAnIzMzQ0M5OScsICcjMzNDQ0NDJywgJyMzM0NDRkYnLFxuICAnIzY2MDBDQycsICcjNjYwMEZGJywgJyM2NjMzQ0MnLCAnIzY2MzNGRicsICcjNjZDQzAwJywgJyM2NkNDMzMnLCAnIzk5MDBDQycsXG4gICcjOTkwMEZGJywgJyM5OTMzQ0MnLCAnIzk5MzNGRicsICcjOTlDQzAwJywgJyM5OUNDMzMnLCAnI0NDMDAwMCcsICcjQ0MwMDMzJyxcbiAgJyNDQzAwNjYnLCAnI0NDMDA5OScsICcjQ0MwMENDJywgJyNDQzAwRkYnLCAnI0NDMzMwMCcsICcjQ0MzMzMzJywgJyNDQzMzNjYnLFxuICAnI0NDMzM5OScsICcjQ0MzM0NDJywgJyNDQzMzRkYnLCAnI0NDNjYwMCcsICcjQ0M2NjMzJywgJyNDQzk5MDAnLCAnI0NDOTkzMycsXG4gICcjQ0NDQzAwJywgJyNDQ0NDMzMnLCAnI0ZGMDAwMCcsICcjRkYwMDMzJywgJyNGRjAwNjYnLCAnI0ZGMDA5OScsICcjRkYwMENDJyxcbiAgJyNGRjAwRkYnLCAnI0ZGMzMwMCcsICcjRkYzMzMzJywgJyNGRjMzNjYnLCAnI0ZGMzM5OScsICcjRkYzM0NDJywgJyNGRjMzRkYnLFxuICAnI0ZGNjYwMCcsICcjRkY2NjMzJywgJyNGRjk5MDAnLCAnI0ZGOTkzMycsICcjRkZDQzAwJywgJyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCIvKmdsb2JhbCBCbG9iLEZpbGUqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJyk7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nKTtcblxuLyoqXG4gKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICogQW55dGhpbmcgd2l0aCBibG9icyBvciBmaWxlcyBzaG91bGQgYmUgZmVkIHRocm91Z2ggcmVtb3ZlQmxvYnMgYmVmb3JlIGNvbWluZ1xuICogaGVyZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgcGFjayA9IHBhY2tldDtcbiAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICByZXR1cm4ge3BhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVyc307XG59O1xuXG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChpc0J1ZihkYXRhKSkge1xuICAgIHZhciBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgYnVmZmVycykge1xuICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gIHBhY2tldC5hdHRhY2htZW50cyA9IHVuZGVmaW5lZDsgLy8gbm8gbG9uZ2VyIHVzZWZ1bFxuICByZXR1cm4gcGFja2V0O1xufTtcblxuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJlbW92ZXMgQmxvYnMgb3IgRmlsZXMgZnJvbSBkYXRhIHZpYVxuICogRmlsZVJlYWRlcidzIHJlYWRBc0FycmF5QnVmZmVyIG1ldGhvZC4gVXNlZCBiZWZvcmUgZW5jb2RpbmdcbiAqIGRhdGEgYXMgbXNncGFjay4gQ2FsbHMgY2FsbGJhY2sgd2l0aCB0aGUgYmxvYmxlc3MgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBfcmVtb3ZlQmxvYnMob2JqLCBjdXJLZXksIGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcblxuICAgIC8vIGNvbnZlcnQgYW55IGJsb2JcbiAgICBpZiAoKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKSkge1xuICAgICAgcGVuZGluZ0Jsb2JzKys7XG5cbiAgICAgIC8vIGFzeW5jIGZpbGVyZWFkZXJcbiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7IC8vIHRoaXMucmVzdWx0ID09IGFycmF5YnVmZmVyXG4gICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0KSB7XG4gICAgICAgICAgY29udGFpbmluZ09iamVjdFtjdXJLZXldID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYmxvYmxlc3NEYXRhID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBub3RoaW5nIHBlbmRpbmcgaXRzIGNhbGxiYWNrIHRpbWVcbiAgICAgICAgaWYoISAtLXBlbmRpbmdCbG9icykge1xuICAgICAgICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIob2JqKTsgLy8gYmxvYiAtPiBhcnJheWJ1ZmZlclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7IC8vIGhhbmRsZSBhcnJheVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFpc0J1ZihvYmopKSB7IC8vIGFuZCBvYmplY3RcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHBlbmRpbmdCbG9icyA9IDA7XG4gIHZhciBibG9ibGVzc0RhdGEgPSBkYXRhO1xuICBfcmVtb3ZlQmxvYnMoYmxvYmxlc3NEYXRhKTtcbiAgaWYgKCFwZW5kaW5nQmxvYnMpIHtcbiAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICB9XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wpO1xuXG4gIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyAnNDQzJyA6ICc4MCc7XG4gIH1cblxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHxcbiAgICAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZSAhPT0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtIHx8ICd0JztcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107XG4gIHRoaXMudHJhbnNwb3J0T3B0aW9ucyA9IG9wdHMudHJhbnNwb3J0T3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgdGhpcy5wb2xpY3lQb3J0ID0gb3B0cy5wb2xpY3lQb3J0IHx8IDg0MztcbiAgdGhpcy5yZW1lbWJlclVwZ3JhZGUgPSBvcHRzLnJlbWVtYmVyVXBncmFkZSB8fCBmYWxzZTtcbiAgdGhpcy5iaW5hcnlUeXBlID0gbnVsbDtcbiAgdGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBvcHRzLm9ubHlCaW5hcnlVcGdyYWRlcztcbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IGZhbHNlICE9PSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlID8gKG9wdHMucGVyTWVzc2FnZURlZmxhdGUgfHwge30pIDogZmFsc2U7XG5cbiAgaWYgKHRydWUgPT09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUpIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgaWYgKHRoaXMucGVyTWVzc2FnZURlZmxhdGUgJiYgbnVsbCA9PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgIHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkID0gMTAyNDtcbiAgfVxuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4IHx8IG51bGw7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXkgfHwgbnVsbDtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlIHx8IG51bGw7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydCB8fCBudWxsO1xuICB0aGlzLmNhID0gb3B0cy5jYSB8fCBudWxsO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnMgfHwgbnVsbDtcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9ICEhb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9ICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09ICdyZWFjdG5hdGl2ZScpO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgb3IgUmVhY3ROYXRpdmUgY2xpZW50XG4gIGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5pc1JlYWN0TmF0aXZlKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHdpdGhDcmVkZW50aWFsczogb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgfHwgdGhpcy53aXRoQ3JlZGVudGlhbHMsXG4gICAgdGltZXN0YW1wUmVxdWVzdHM6IG9wdGlvbnMudGltZXN0YW1wUmVxdWVzdHMgfHwgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyxcbiAgICB0aW1lc3RhbXBQYXJhbTogb3B0aW9ucy50aW1lc3RhbXBQYXJhbSB8fCB0aGlzLnRpbWVzdGFtcFBhcmFtLFxuICAgIHBvbGljeVBvcnQ6IG9wdGlvbnMucG9saWN5UG9ydCB8fCB0aGlzLnBvbGljeVBvcnQsXG4gICAgcGZ4OiBvcHRpb25zLnBmeCB8fCB0aGlzLnBmeCxcbiAgICBrZXk6IG9wdGlvbnMua2V5IHx8IHRoaXMua2V5LFxuICAgIHBhc3NwaHJhc2U6IG9wdGlvbnMucGFzc3BocmFzZSB8fCB0aGlzLnBhc3NwaHJhc2UsXG4gICAgY2VydDogb3B0aW9ucy5jZXJ0IHx8IHRoaXMuY2VydCxcbiAgICBjYTogb3B0aW9ucy5jYSB8fCB0aGlzLmNhLFxuICAgIGNpcGhlcnM6IG9wdGlvbnMuY2lwaGVycyB8fCB0aGlzLmNpcGhlcnMsXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCB8fCB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLFxuICAgIGV4dHJhSGVhZGVyczogb3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgdGhpcy5leHRyYUhlYWRlcnMsXG4gICAgZm9yY2VOb2RlOiBvcHRpb25zLmZvcmNlTm9kZSB8fCB0aGlzLmZvcmNlTm9kZSxcbiAgICBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIHx8IHRoaXMubG9jYWxBZGRyZXNzLFxuICAgIHJlcXVlc3RUaW1lb3V0OiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0IHx8IHRoaXMucmVxdWVzdFRpbWVvdXQsXG4gICAgcHJvdG9jb2xzOiBvcHRpb25zLnByb3RvY29scyB8fCB2b2lkICgwKSxcbiAgICBpc1JlYWN0TmF0aXZlOiB0aGlzLmlzUmVhY3ROYXRpdmVcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iLCIvKiBnbG9iYWwgYXR0YWNoRXZlbnQgKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHInKTtcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vZ2xvYmFsVGhpcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcbiAgb3B0cy53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMud2l0aENyZWRlbnRpYWxzID0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnN1cHBvcnRzQmluYXJ5ICYmIGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTsgY2hhcnNldD1VVEYtOCcpIHtcbiAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXRcbiAgICAgICAgICAvLyBkb2VzIG5vdCB0aHJvdyBpbiB0aGUgc2FtZSB0aWNrIGFuZCBnZXRzIGNhdWdodCBoZXJlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9uRXJyb3IodHlwZW9mIHhoci5zdGF0dXMgPT09ICdudW1iZXInID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gIH1cblxuICB0aGlzLnhociA9IG51bGw7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGxvYWQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YTtcbiAgdHJ5IHtcbiAgICB2YXIgY29udGVudFR5cGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTsgY2hhcnNldD1VVEYtOCcpIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZSB8fCB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpO1xuICB9XG4gIGlmIChudWxsICE9IGRhdGEpIHtcbiAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJiAhdGhpcy54cyAmJiB0aGlzLmVuYWJsZXNYRFI7XG59O1xuXG4vKipcbiAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNsZWFudXAoKTtcbn07XG5cbi8qKlxuICogQWJvcnRzIHBlbmRpbmcgcmVxdWVzdHMgd2hlbiB1bmxvYWRpbmcgdGhlIHdpbmRvdy4gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudFxuICogbWVtb3J5IGxlYWtzIChlLmcuIHdoZW4gdXNpbmcgSUUpIGFuZCB0byBlbnN1cmUgdGhhdCBubyBzcHVyaW91cyBlcnJvciBpc1xuICogZW1pdHRlZC5cbiAqL1xuXG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICBpZiAodHlwZW9mIGF0dGFjaEV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYXR0YWNoRXZlbnQoJ29udW5sb2FkJywgdW5sb2FkSGFuZGxlcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgdGVybWluYXRpb25FdmVudCA9ICdvbnBhZ2VoaWRlJyBpbiBnbG9iYWxUaGlzID8gJ3BhZ2VoaWRlJyA6ICd1bmxvYWQnO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIodGVybWluYXRpb25FdmVudCwgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIgKCkge1xuICBmb3IgKHZhciBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHtcbiAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuIiwiXG4vKipcbiAqIEdldHMgdGhlIGtleXMgZm9yIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0ga2V5c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzIChvYmope1xuICB2YXIgYXJyID0gW107XG4gIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwgaSkpIHtcbiAgICAgIGFyci5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG5cbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0dmFyIG91dHB1dCA9IFtdO1xuXHR2YXIgY291bnRlciA9IDA7XG5cdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBleHRyYTtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBvdXRwdXQgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHR9XG5cdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0fVxuXHR2YXIgc3ltYm9sID0gJyc7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHR9XG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7XG5cdHJldHVybiBzeW1ib2w7XG59XG5cbmZ1bmN0aW9uIHV0ZjhlbmNvZGUoc3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgY29kZVBvaW50O1xuXHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0fVxuXHRyZXR1cm4gYnl0ZVN0cmluZztcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuXHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHRpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7XG5cdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHR9XG5cblx0Ly8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZVxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVTeW1ib2woc3RyaWN0KSB7XG5cdHZhciBieXRlMTtcblx0dmFyIGJ5dGUyO1xuXHR2YXIgYnl0ZTM7XG5cdHZhciBieXRlNDtcblx0dmFyIGNvZGVQb2ludDtcblxuXHRpZiAoYnl0ZUluZGV4ID4gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0aWYgKGJ5dGVJbmRleCA9PSBieXRlQ291bnQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBSZWFkIGZpcnN0IGJ5dGVcblx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKVxuXHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdHJldHVybiBieXRlMTtcblx0fVxuXG5cdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRpZiAoKGJ5dGUxICYgMHhGMCkgPT0gMHhFMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MEYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MEMpIHxcblx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH1cblx0fVxuXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIFVURi04IGRldGVjdGVkJyk7XG59XG5cbnZhciBieXRlQXJyYXk7XG52YXIgYnl0ZUNvdW50O1xudmFyIGJ5dGVJbmRleDtcbmZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRieXRlSW5kZXggPSAwO1xuXHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHR2YXIgdG1wO1xuXHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0fVxuXHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHZlcnNpb246ICcyLjEuMicsXG5cdGVuY29kZTogdXRmOGVuY29kZSxcblx0ZGVjb2RlOiB1dGY4ZGVjb2RlXG59O1xuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBjaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG4gIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgdmFyIGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMSldO1xuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XG4gICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzMpXTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KSgpO1xuIiwiLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XHJcbiAqL1xyXG5cclxudmFyIEJsb2JCdWlsZGVyID0gdHlwZW9mIEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgV2ViS2l0QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gV2ViS2l0QmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNU0Jsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1TQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNb3pCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNb3pCbG9iQnVpbGRlciA6IFxyXG4gIGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3IgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcclxuICAgIHJldHVybiBhLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xyXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XHJcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iQnVpbGRlciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlclxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXHJcbiAqIFVzZWQgYnkgQmxvYkJ1aWxkZXIgY29uc3RydWN0b3IgYW5kIG9sZCBicm93c2VycyB0aGF0IGRpZG4ndFxyXG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XHJcbiAgcmV0dXJuIGFyeS5tYXAoZnVuY3Rpb24oY2h1bmspIHtcclxuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xyXG5cclxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XHJcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxyXG4gICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJ1ZiA9IGNvcHkuYnVmZmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYnVmO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaHVuaztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XHJcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xyXG4gICAgYmIuYXBwZW5kKHBhcnQpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBCbG9iKG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSwgb3B0aW9ucyB8fCB7fSk7XHJcbn07XHJcblxyXG5pZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgQmxvYkJ1aWxkZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxuICBCbG9iQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xyXG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGdsb2JhbFRoaXMgPSByZXF1aXJlKCcuLi9nbG9iYWxUaGlzJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OUFBvbGxpbmc7XG5cbi8qKlxuICogQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gKi9cblxudmFyIHJOZXdsaW5lID0gL1xcbi9nO1xudmFyIHJFc2NhcGVkTmV3bGluZSA9IC9cXFxcbi9nO1xuXG4vKipcbiAqIEdsb2JhbCBKU09OUCBjYWxsYmFja3MuXG4gKi9cblxudmFyIGNhbGxiYWNrcztcblxuLyoqXG4gKiBOb29wLlxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHsgfVxuXG4vKipcbiAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEpTT05QUG9sbGluZyAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgLy8gZGVmaW5lIGdsb2JhbCBjYWxsYmFja3MgYXJyYXkgaWYgbm90IHByZXNlbnRcbiAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGNvbnNpZGVyIG11bHRpcGxlIGVuZ2luZXMgaW4gdGhlIHNhbWUgcGFnZVxuICAgIGNhbGxiYWNrcyA9IGdsb2JhbFRoaXMuX19fZWlvID0gKGdsb2JhbFRoaXMuX19fZWlvIHx8IFtdKTtcbiAgfVxuXG4gIC8vIGNhbGxiYWNrIGlkZW50aWZpZXJcbiAgdGhpcy5pbmRleCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgLy8gYWRkIGNhbGxiYWNrIHRvIGpzb25wIGdsb2JhbFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uIChtc2cpIHtcbiAgICBzZWxmLm9uRGF0YShtc2cpO1xuICB9KTtcblxuICAvLyBhcHBlbmQgdG8gcXVlcnkgc3RyaW5nXG4gIHRoaXMucXVlcnkuaiA9IHRoaXMuaW5kZXg7XG5cbiAgLy8gcHJldmVudCBzcHVyaW91cyBlcnJvcnMgZnJvbSBiZWluZyBlbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyB1bmxvYWRlZFxuICBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5zY3JpcHQpIHNlbGYuc2NyaXB0Lm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChKU09OUFBvbGxpbmcsIFBvbGxpbmcpO1xuXG4vKlxuICogSlNPTlAgb25seSBzdXBwb3J0cyBiaW5hcnkgYXMgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLmZvcm0pIHtcbiAgICB0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO1xuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICB9XG5cbiAgUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICBzY3JpcHQuc3JjID0gdGhpcy51cmkoKTtcbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbCBlcnJvcicsIGUpO1xuICB9O1xuXG4gIHZhciBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgaWYgKGluc2VydEF0KSB7XG4gICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gIH0gZWxzZSB7XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfVxuICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcblxuICB2YXIgaXNVQWdlY2tvID0gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICBpZiAoaXNVQWdlY2tvKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgfSwgMTAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgd2l0aCBhIGhpZGRlbiBpZnJhbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5mb3JtKSB7XG4gICAgdmFyIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgdmFyIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHZhciBpZCA9IHRoaXMuaWZyYW1lSWQgPSAnZWlvX2lmcmFtZV8nICsgdGhpcy5pbmRleDtcbiAgICB2YXIgaWZyYW1lO1xuXG4gICAgZm9ybS5jbGFzc05hbWUgPSAnc29ja2V0aW8nO1xuICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGZvcm0uc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgIGZvcm0uc3R5bGUubGVmdCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICAgIGZvcm0uc2V0QXR0cmlidXRlKCdhY2NlcHQtY2hhcnNldCcsICd1dGYtOCcpO1xuICAgIGFyZWEubmFtZSA9ICdkJztcbiAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gIH1cblxuICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtcblxuICBmdW5jdGlvbiBjb21wbGV0ZSAoKSB7XG4gICAgaW5pdElmcmFtZSgpO1xuICAgIGZuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0SWZyYW1lICgpIHtcbiAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvcicsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgIHZhciBodG1sID0gJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgbmFtZT1cIicgKyBzZWxmLmlmcmFtZUlkICsgJ1wiPic7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO1xuICAgICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0OjAnO1xuICAgIH1cblxuICAgIGlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7XG5cbiAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBzZWxmLmlmcmFtZSA9IGlmcmFtZTtcbiAgfVxuXG4gIGluaXRJZnJhbWUoKTtcblxuICAvLyBlc2NhcGUgXFxuIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBjb252ZXJ0ZWQgaW50byBcXHJcXG4gYnkgc29tZSBVQXNcbiAgLy8gZG91YmxlIGVzY2FwaW5nIGlzIHJlcXVpcmVkIGZvciBlc2NhcGVkIG5ldyBsaW5lcyBiZWNhdXNlIHVuZXNjYXBpbmcgb2YgbmV3IGxpbmVzIGNhbiBiZSBkb25lIHNhZmVseSBvbiBzZXJ2ZXItc2lkZVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgJ1xcXFxcXG4nKTtcbiAgdGhpcy5hcmVhLnZhbHVlID0gZGF0YS5yZXBsYWNlKHJOZXdsaW5lLCAnXFxcXG4nKTtcblxuICB0cnkge1xuICAgIHRoaXMuZm9ybS5zdWJtaXQoKTtcbiAgfSBjYXRjaCAoZSkge31cblxuICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7XG4gIH1cbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0Jyk7XG5cbnZhciBCcm93c2VyV2ViU29ja2V0LCBOb2RlV2ViU29ja2V0O1xuXG5pZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQnJvd3NlcldlYlNvY2tldCA9IFdlYlNvY2tldDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIEJyb3dzZXJXZWJTb2NrZXQgPSBzZWxmLldlYlNvY2tldCB8fCBzZWxmLk1veldlYlNvY2tldDtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRyeSB7XG4gICAgTm9kZVdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJyk7XG4gIH0gY2F0Y2ggKGUpIHsgfVxufVxuXG4vKipcbiAqIEdldCBlaXRoZXIgdGhlIGBXZWJTb2NrZXRgIG9yIGBNb3pXZWJTb2NrZXRgIGdsb2JhbHNcbiAqIGluIHRoZSBicm93c2VyIG9yIHRyeSB0byByZXNvbHZlIFdlYlNvY2tldC1jb21wYXRpYmxlXG4gKiBpbnRlcmZhY2UgZXhwb3NlZCBieSBgd3NgIGZvciBOb2RlLWxpa2UgZW52aXJvbm1lbnQuXG4gKi9cblxudmFyIFdlYlNvY2tldEltcGwgPSBCcm93c2VyV2ViU29ja2V0IHx8IE5vZGVXZWJTb2NrZXQ7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBXUztcblxuLyoqXG4gKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFdTIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IG9wdHMucGVyTWVzc2FnZURlZmxhdGU7XG4gIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldCAmJiAhb3B0cy5mb3JjZU5vZGU7XG4gIHRoaXMucHJvdG9jb2xzID0gb3B0cy5wcm90b2NvbHM7XG4gIGlmICghdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICBXZWJTb2NrZXRJbXBsID0gTm9kZVdlYlNvY2tldDtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFdTLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLm5hbWUgPSAnd2Vic29ja2V0JztcblxuLypcbiAqIFdlYlNvY2tldHMgc3VwcG9ydCBiaW5hcnlcbiAqL1xuXG5XUy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIE9wZW5zIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVyaSA9IHRoaXMudXJpKCk7XG4gIHZhciBwcm90b2NvbHMgPSB0aGlzLnByb3RvY29scztcbiAgdmFyIG9wdHMgPSB7XG4gICAgYWdlbnQ6IHRoaXMuYWdlbnQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGVcbiAgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgIG9wdHMuaGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuICB9XG4gIGlmICh0aGlzLmxvY2FsQWRkcmVzcykge1xuICAgIG9wdHMubG9jYWxBZGRyZXNzID0gdGhpcy5sb2NhbEFkZHJlc3M7XG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMud3MgPVxuICAgICAgdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgJiYgIXRoaXMuaXNSZWFjdE5hdGl2ZVxuICAgICAgICA/IHByb3RvY29sc1xuICAgICAgICAgID8gbmV3IFdlYlNvY2tldEltcGwodXJpLCBwcm90b2NvbHMpXG4gICAgICAgICAgOiBuZXcgV2ViU29ja2V0SW1wbCh1cmkpXG4gICAgICAgIDogbmV3IFdlYlNvY2tldEltcGwodXJpLCBwcm90b2NvbHMsIG9wdHMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIH1cblxuICBpZiAodGhpcy53cy5iaW5hcnlUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy53cy5zdXBwb3J0cyAmJiB0aGlzLndzLnN1cHBvcnRzLmJpbmFyeSkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdub2RlYnVmZmVyJztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICB9XG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xufTtcblxuLyoqXG4gKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy53cy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbk9wZW4oKTtcbiAgfTtcbiAgdGhpcy53cy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25DbG9zZSgpO1xuICB9O1xuICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldikge1xuICAgIHNlbGYub25EYXRhKGV2LmRhdGEpO1xuICB9O1xuICB0aGlzLndzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignd2Vic29ja2V0IGVycm9yJywgZSk7XG4gIH07XG59O1xuXG4vKipcbiAqIFdyaXRlcyBkYXRhIHRvIHNvY2tldC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiBwYWNrZXRzLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgLy8gZW5jb2RlUGFja2V0IGVmZmljaWVudCBhcyBpdCB1c2VzIFdTIGZyYW1pbmdcbiAgLy8gbm8gbmVlZCBmb3IgZW5jb2RlUGF5bG9hZFxuICB2YXIgdG90YWwgPSBwYWNrZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB0b3RhbDsgaSA8IGw7IGkrKykge1xuICAgIChmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICBwYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCwgc2VsZi5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKCFzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpXG4gICAgICAgICAgdmFyIG9wdHMgPSB7fTtcbiAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgICAgICAgdmFyIGxlbiA9ICdzdHJpbmcnID09PSB0eXBlb2YgZGF0YSA/IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuIDwgc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgd2Vic29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIGJ1dCB0aGUgYnJvd3NlciBkaWRuJ3RcbiAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgIC8vIHRocm93IGFuIGVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaVxuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSwgb3B0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVidWcoJ3dlYnNvY2tldCBjbG9zZWQgYmVmb3JlIG9uY2xvc2UgZXZlbnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC0tdG90YWwgfHwgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSkocGFja2V0c1tpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBkb25lICgpIHtcbiAgICBzZWxmLmVtaXQoJ2ZsdXNoJyk7XG5cbiAgICAvLyBmYWtlIGRyYWluXG4gICAgLy8gZGVmZXIgdG8gbmV4dCB0aWNrIHRvIGFsbG93IFNvY2tldCB0byBjbGVhciB3cml0ZUJ1ZmZlclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gICAgfSwgMCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2VcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIENsb3NlcyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLndzLmNsb3NlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnd3NzJyA6ICd3cyc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCd3c3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAoJ3dzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIGFwcGVuZCB0aW1lc3RhbXAgdG8gVVJJXG4gIGlmICh0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgLy8gY29tbXVuaWNhdGUgYmluYXJ5IHN1cHBvcnQgY2FwYWJpbGl0aWVzXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgIHF1ZXJ5LmI2NCA9IDE7XG4gIH1cblxuICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gJz8nICsgcXVlcnk7XG4gIH1cblxuICB2YXIgaXB2NiA9IHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMTtcbiAgcmV0dXJuIHNjaGVtYSArICc6Ly8nICsgKGlwdjYgPyAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG59O1xuXG4vKipcbiAqIEZlYXR1cmUgZGV0ZWN0aW9uIGZvciBXZWJTb2NrZXQuXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhV2ViU29ja2V0SW1wbCAmJiAhKCdfX2luaXRpYWxpemUnIGluIFdlYlNvY2tldEltcGwgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICAgIC8qIGN1cnNvcjogY3Jvc3NoYWlyOyAqL1xcbiAgICBjdXJzb3I6IG5vbmU7XFxufVxcbmJvZHkge1xcbiAgICBtYXJnaW46IDA7XFxufVxcbmNhbnZhcyB7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5vdmVybGF5IHtcXG4gICAgei1pbmRleDogMTAwO1xcbiAgICB3aWR0aDogMzB2dztcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcGFkZGluZzogMC44ZW07XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgY29sb3I6IGxpZ2h0Z3JheTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMCwgMjAsIDIwLCAwLjQpO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIiN2ZXJzaW9uIDMwMCBlc1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcbnVuaWZvcm0gZmxvYXQgdV9UaW1lRGVsdGE7XFxudW5pZm9ybSBmbG9hdCB1X1RpbWU7XFxudW5pZm9ybSBzYW1wbGVyMkQgdV9SZ05vaXNlO1xcbnVuaWZvcm0gdmVjMiB1X0dyYXZpdHk7XFxuXFxuLy8gUEFSVElDTEUgU1BFQ0lGSUMgLS0tLS0tLS0tLVxcbnVuaWZvcm0gdmVjMiB1X09yaWdpbjtcXG51bmlmb3JtIGZsb2F0IHVfTWluVGhldGE7XFxudW5pZm9ybSBmbG9hdCB1X01heFRoZXRhO1xcbnVuaWZvcm0gZmxvYXQgdV9NaW5TcGVlZDtcXG51bmlmb3JtIGZsb2F0IHVfTWF4U3BlZWQ7XFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbnVuaWZvcm0gc2FtcGxlcjJEIHVfRm9yY2VGaWVsZDtcXG5cXG4vLyBQQVJUSUNMRSBTUEVDSUZJQyAtLS0tLS0tLS0tXFxuaW4gdmVjMiBpX1Bvc2l0aW9uO1xcbmluIGZsb2F0IGlfQWdlO1xcbmluIGZsb2F0IGlfTGlmZTtcXG5pbiB2ZWMyIGlfVmVsb2NpdHk7XFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcblxcbi8vIFRyYW5zZm9ybSBGZWVkYmFjayBWYXJ5aW5nc1xcbm91dCB2ZWMyIHZfUG9zaXRpb247XFxub3V0IGZsb2F0IHZfQWdlO1xcbm91dCBmbG9hdCB2X0xpZmU7XFxub3V0IHZlYzIgdl9WZWxvY2l0eTtcXG5cXG52ZWMyIGF0dHJhY3RvckxvYzEgPSB2ZWMyKC0wLjUsMC4wKTtcXG52ZWMyIGF0dHJhY3RvckxvYzIgPSB2ZWMyKDAuNSwwLjApO1xcbnZlYzIgYWNjZWxlcmF0aW9uID0gdmVjMigwLjAsMC4wKTtcXG5mbG9hdCBtYXNzID0gNTAuMDtcXG5cXG52ZWMyIGdyYWQodmVjMiBwKSB7XFxuICAgIGNvbnN0IGZsb2F0IHRleHR1cmVfd2lkdGggPSA1MTIuMDtcXG4gICAgdmVjNCB2ID0gdGV4dHVyZSh1X1JnTm9pc2UsIHZlYzIocC54ICsgdV9UaW1lKjIuMCAvIHRleHR1cmVfd2lkdGgsIHAueSArIHVfVGltZSoyLjAgLyB0ZXh0dXJlX3dpZHRoKSk7XFxuICAgIHJldHVybiBub3JtYWxpemUodi54eSoyLjAgLSB2ZWMyKDEuMCkpO1xcbn1cXG5cXG4vKiBTLXNoYXBlZCBjdXJ2ZSBmb3IgMCA8PSB0IDw9IDEgKi9cXG5mbG9hdCBmYWRlKGZsb2F0IHQpIHtcXG4gICAgcmV0dXJuIHQqdCp0Kih0Kih0KjYuMCAtIDE1LjApICsgMTAuMCk7XFxufVxcblxcblxcbi8qIDJEIG5vaXNlICovXFxuZmxvYXQgbm9pc2UodmVjMiBwKSB7XFxuICAgIC8qIENhbGN1bGF0ZSBsYXR0aWNlIHBvaW50cy4gKi9cXG4gICAgdmVjMiBwMCA9IGZsb29yKHApO1xcbiAgICB2ZWMyIHAxID0gcDAgKyB2ZWMyKDEuMCwgMC4wKTtcXG4gICAgdmVjMiBwMiA9IHAwICsgdmVjMigwLjAsIDEuMCk7XFxuICAgIHZlYzIgcDMgPSBwMCArIHZlYzIoMS4wLCAxLjApO1xcblxcbiAgICAvKiBMb29rIHVwIGdyYWRpZW50cyBhdCBsYXR0aWNlIHBvaW50cy4gKi9cXG4gICAgdmVjMiBnMCA9IGdyYWQocDApO1xcbiAgICB2ZWMyIGcxID0gZ3JhZChwMSk7XFxuICAgIHZlYzIgZzIgPSBncmFkKHAyKTtcXG4gICAgdmVjMiBnMyA9IGdyYWQocDMpO1xcblxcbiAgICBmbG9hdCB0MCA9IHAueCAtIHAwLng7XFxuICAgIGZsb2F0IGZhZGVfdDAgPSBmYWRlKHQwKTsgLyogVXNlZCBmb3IgaW50ZXJwb2xhdGlvbiBpbiBob3Jpem9udGFsIGRpcmVjdGlvbiAqL1xcblxcbiAgICBmbG9hdCB0MSA9IHAueSAtIHAwLnk7XFxuICAgIGZsb2F0IGZhZGVfdDEgPSBmYWRlKHQxKTsgLyogVXNlZCBmb3IgaW50ZXJwb2xhdGlvbiBpbiB2ZXJ0aWNhbCBkaXJlY3Rpb24uICovXFxuXFxuICAgIC8qIENhbGN1bGF0ZSBkb3QgcHJvZHVjdHMgYW5kIGludGVycG9sYXRlLiovXFxuICAgIGZsb2F0IHAwcDEgPSAoMS4wIC0gZmFkZV90MCkgKiBkb3QoZzAsIChwIC0gcDApKSArIGZhZGVfdDAgKiBkb3QoZzEsIChwIC0gcDEpKTsgLyogYmV0d2VlbiB1cHBlciB0d28gbGF0dGljZSBwb2ludHMgKi9cXG4gICAgZmxvYXQgcDJwMyA9ICgxLjAgLSBmYWRlX3QwKSAqIGRvdChnMiwgKHAgLSBwMikpICsgZmFkZV90MCAqIGRvdChnMywgKHAgLSBwMykpOyAvKiBiZXR3ZWVuIGxvd2VyIHR3byBsYXR0aWNlIHBvaW50cyAqL1xcblxcbiAgICAvKiBDYWxjdWxhdGUgZmluYWwgcmVzdWx0ICovXFxuICAgIHJldHVybiAoMS4wIC0gZmFkZV90MSkgKiBwMHAxICsgZmFkZV90MSAqIHAycDM7XFxufVxcblxcbmZsb2F0IHJhbmRvbSAodmVjMiBzdCkge1xcbiAgICByZXR1cm4gZnJhY3Qoc2luKGRvdChzdC54eSwgdmVjMigxMi45ODk4LDc4LjIzMykpKSogNDM3NTguNTQ1MzEyMyk7XFxufVxcblxcbnZlYzIgYXR0cmFjdCh2ZWMyIGF0dGFjdG9yLCB2ZWMyIGxvYyl7XFxuICAgIHZlYzIgZGlyID0gYXR0YWN0b3IgLSBsb2M7XFxuICAgIGZsb2F0IGQgPSBsZW5ndGgoZGlyKTtcXG4gICAgbm9ybWFsaXplKGRpcik7XFxuICAgIGZsb2F0IGZvcmNlID0gNTAwLjAvKDEuMCpkKmQpO1xcbiAgICBkaXIgKj0gZm9yY2U7XFxuICAgIHJldHVybiBkaXI7XFxufVxcblxcbnZvaWQgbWFpbigpe1xcbiAgICBpZihpX0FnZSA+PSBpX0xpZmUpIHtcXG4gICAgICAgIC8vIFNhbXBsaW5nIHRoZSB0ZXh0dXJlIGJhc2VkIG9uIHBhcnRpY2xlIElELlxcbiAgICAgICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgc2FtZSByYW5kb20gc2VlZCB2YWx1ZSBmb3IgZWFjaCBwYXJ0aWNsZVxcbiAgICAgICAgLy8gZXZlcnkgdGltZS5cXG4gICAgICAgIGl2ZWMyIG5vaXNlX2Nvb3JkID0gaXZlYzIoZ2xfVmVydGV4SUQgJSA1MTIsIGdsX1ZlcnRleElEIC8gNTEyKTtcXG4gICAgICAgIHZlYzIgcmFuZCA9IHRleGVsRmV0Y2godV9SZ05vaXNlLCBub2lzZV9jb29yZCwgMCkucmc7XFxuICAgICAgICAvLyBJbml0aWFsIGRpcmVjdGlvbiBvZiBwYXJ0aWNsZSBiYXNlZCBvbiByYW5kb20gdmFsdWVcXG4gICAgICAgIGZsb2F0IHRoZXRhID0gdV9NaW5UaGV0YSArIHJhbmQucioodV9NYXhUaGV0YSAtIHVfTWluVGhldGEpO1xcblxcbiAgICAgICAgZmxvYXQgeCA9IGNvcyh0aGV0YSk7XFxuICAgICAgICBmbG9hdCB5ID0gc2luKHRoZXRhKTtcXG5cXG4gICAgICAgIHZfUG9zaXRpb24gPSB1X09yaWdpbjtcXG4gICAgICAgIC8vIHZfUG9zaXRpb24gPSB2ZWMyKChyYW5kb20ocmFuZC54eSkqMi4wKS0xLjAsIChyYW5kb20ocmFuZC55eCkqMi4wKS0xLjApO1xcblxcbiAgICAgICAgdl9BZ2UgPSAwLjA7XFxuICAgICAgICB2X0xpZmUgPSBpX0xpZmU7XFxuXFxuICAgICAgICB2X1ZlbG9jaXR5ID0gdmVjMih4LCB5KSAqICh1X01pblNwZWVkICsgcmFuZC5nICogKHVfTWF4U3BlZWQgLSB1X01pblNwZWVkKSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB2X1Bvc2l0aW9uID0gaV9Qb3NpdGlvbiArIGlfVmVsb2NpdHkgKiB1X1RpbWVEZWx0YTtcXG4gICAgICAgIGFjY2VsZXJhdGlvbiArPSBhdHRyYWN0KGF0dHJhY3RvckxvYzEsIHZfUG9zaXRpb24pO1xcbiAgICAgICAgYWNjZWxlcmF0aW9uICs9IGF0dHJhY3QoYXR0cmFjdG9yTG9jMiwgdl9Qb3NpdGlvbik7XFxuICAgICAgICBhY2NlbGVyYXRpb24gLz0gbWFzcztcXG4gICAgICAgIHZfQWdlID0gaV9BZ2UgKyB1X1RpbWVEZWx0YTtcXG4gICAgICAgIHZfTGlmZSA9IGlfTGlmZTtcXG4gICAgICAgIC8vIHZlYzIgZm9yY2UgPSA0LjAgKiAoMi4wICogdGV4dHVyZSh1X0ZvcmNlRmllbGQsIGlfUG9zaXRpb24pLnJnIC0gdmVjMigxLjApKTtcXG4gICAgICAgIGZsb2F0IG4gPSBcXG4gICAgICAgICAgICBub2lzZShpX1Bvc2l0aW9uLzY0LjApICogMS4wICtcXG4gICAgICAgICAgICBub2lzZShpX1Bvc2l0aW9uLzMyLjApICogMC41ICtcXG4gICAgICAgICAgICBub2lzZShpX1Bvc2l0aW9uLzE2LjApICogMC4yNSArXFxuICAgICAgICAgICAgbm9pc2UoaV9Qb3NpdGlvbi84LjApICAqIDAuMTI1O1xcbiAgICAgICAgdmVjMiBmb3JjZSA9IGlfUG9zaXRpb24qbio1MC4wO1xcbiAgICAgICAgLy8gdl9WZWxvY2l0eSA9IGlfVmVsb2NpdHkgKiAwLjkgKyBhY2NlbGVyYXRpb24gKiB1X1RpbWVEZWx0YSAqIDAuMDA1ICsgdV9HcmF2aXR5ICogdV9UaW1lRGVsdGEgKyBmb3JjZSAqIHVfVGltZURlbHRhO1xcbiAgICAgICAgdl9WZWxvY2l0eSA9IGlfVmVsb2NpdHkgKyBhY2NlbGVyYXRpb24gKiB1X1RpbWVEZWx0YSAqIDAuMSArIHVfR3Jhdml0eSAqIHVfVGltZURlbHRhICsgZm9yY2UgKiB1X1RpbWVEZWx0YTtcXG4gICAgICAgIGFjY2VsZXJhdGlvbiAqPSAwLjA7XFxuICAgIH1cXG59XFxuXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiI3ZlcnNpb24gMzAwIGVzXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuXFxub3V0IHZlYzQgb19GcmFnQ29sb3I7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICBvX0ZyYWdDb2xvciA9IHZlYzQoMS4wKTtcXG59XFxuXFxuXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiI3ZlcnNpb24gMzAwIGVzXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuXFxuaW4gZmxvYXQgdl9BZ2U7XFxuaW4gZmxvYXQgdl9MaWZlO1xcblxcbm91dCB2ZWM0IG9fRnJhZ0NvbG9yO1xcblxcbnZlYzMgcGFsZXR0ZShpbiBmbG9hdCB0LCBpbiB2ZWMzIGEsIGluIHZlYzMgYiwgaW4gdmVjMyBjLCBpbiB2ZWMzIGQpe1xcbiAgICByZXR1cm4gYStiKmNvcyg2LjI4MzE4KihjKnQrZCkpO1xcbn1cXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIGZsb2F0IHQgPSB2X0FnZS92X0xpZmU7XFxuICAgIG9fRnJhZ0NvbG9yID0gdmVjNChcXG4gICAgICAgICAgICBwYWxldHRlKHQsXFxuICAgICAgICAgICAgICAgIHZlYzMoMC44LDAuMywwLjIpLFxcbiAgICAgICAgICAgICAgICB2ZWMzKDAuNywwLjMsMC4zKSxcXG4gICAgICAgICAgICAgICAgdmVjMygwLjksMC40LDAuMiksXFxuICAgICAgICAgICAgICAgIHZlYzMoMC4yLDAuMTUsMC4yMCkpLCAxLjAtdFxcbiAgICAgICAgICAgICk7XFxufVxcblwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIiN2ZXJzaW9uIDMwMCBlc1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcbmluIHZlYzIgaV9Qb3NpdGlvbjtcXG5pbiBmbG9hdCBpX0FnZTtcXG5pbiBmbG9hdCBpX0xpZmU7XFxuaW4gdmVjMiBpX1ZlbG9jaXR5O1xcblxcbm91dCBmbG9hdCB2X0FnZTtcXG5vdXQgZmxvYXQgdl9MaWZlO1xcblxcbnZvaWQgbWFpbigpe1xcbiAgICB2X0FnZSA9IGlfQWdlO1xcbiAgICB2X0xpZmUgPSBpX0xpZmU7XFxuXFxuICAgIGdsX1BvaW50U2l6ZSA9IDEuMCArIDYuMCAqICgxLjAgLSBpX0FnZS9pX0xpZmUpO1xcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoaV9Qb3NpdGlvbiwgMC4wLCAxLjApO1xcbn1cXG5cIiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXMod2lkdGgsIGhlaWdodCkge1xuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgbGV0IGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07XG4gICAgYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgIGNvbnN0IGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicpO1xuXG4gICAgcmV0dXJuIFtjYW52YXMsIGdsXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXkoKXtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm92ZXJsYXlcIik7XG5cbiAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnUCcpO1xuICAgIHRleHQuaW5uZXJIVE1MID0gYDxoMj5HZXR0aW5nIHRvIEtub3cgV2ViR0w8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgIDxicj5HZW5lcmF0aW5nIGljb3NwaGVyZXMgYW5kIGRpc3R1cmJpbmcgdGhlIHZlcnRpY2VzIHdpdGggUGVybGluIG5vaXNlLlxuICAgICAgICAgICAgICAgICAgICAgIDxicj48YnI+TW91c2UgKyBXQVNEIC0gTW92ZVxuICAgICAgICAgICAgICAgICAgICAgIDxicj5TY3JvbGwgLSBDaGFuZ2UgRk9WYDtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dCk7XG5cbiAgICBjb25zdCBjb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGNvZGUudGV4dCA9IFwiQ29kZVwiO1xuICAgIGNvZGUuaHJlZiA9IFwiaHR0cHM6Ly9naXRodWIuY29tL2pvc2htdXJyL3dlYmdsX2Vudmlyb25tZW50X3Rlc3RcIjtcblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb2RlKTtcblxuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07XG4gICAgYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVVSUQoKXtcbiAgICBsZXQgdGV4dCA9ICcnO1xuICAgIGxldCBwb3NzaWJsZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNTsgaSsrKXtcbiAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgfVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdVSUQnLCB0ZXh0KTtcbiAgICByZXR1cm4gdGV4dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRTaGFkZXJQcm9ncmFtKGdsLCB2c1NvdXJjZSwgZnNTb3VyY2UsIHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MpIHtcbiAgICBjb25zdCBzaGFkZXJQcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGxvYWRTaGFkZXIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHZzU291cmNlKTtcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGxvYWRTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgZnNTb3VyY2UpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG5cbiAgICAvKiBTcGVjaWZ5IHZhcnlpbmdzIHRoYXQgd2Ugd2FudCB0byBiZSBjYXB0dXJlZCBpbiB0aGUgdHJhbnNmb3JtXG4gICAgICogICAgICBmZWVkYmFjayBidWZmZXIuICovXG4gICAgaWYgKHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MgIT0gbnVsbCkge1xuICAgICAgICBnbC50cmFuc2Zvcm1GZWVkYmFja1ZhcnlpbmdzKFxuICAgICAgICAgICAgc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgICAgIHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MsXG4gICAgICAgICAgICBnbC5JTlRFUkxFQVZFRF9BVFRSSUJTKVxuICAgIH1cblxuICAgIGdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuXG4gICAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHNoYWRlclByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgICBhbGVydCgnVW5hYmxlIHRvIGluaXRpYWxpemUgdGhlIHNoYWRlciBwcm9ncmFtOiAnICsgZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coc2hhZGVyUHJvZ3JhbSkpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbn1cblxuZnVuY3Rpb24gbG9hZFNoYWRlcihnbCwgdHlwZSwgc291cmNlKSB7XG4gICAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgICAgYWxlcnQoJ0FuIGVycm9yIG9jY3VycmVkIGNvbXBpbGluZyB0aGUgc2hhZGVyczogJyArIGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKSk7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHNoYWRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVJHRGF0YShzaXplX3gsIHNpemVfeSl7XG4gICAgbGV0IGQgPSBbXTtcbiAgICBmb3IobGV0IGk9MDsgaTxzaXplX3gqc2l6ZV95OyArK2kpe1xuICAgICAgICBkLnB1c2goTWF0aC5yYW5kb20oKSoyNTUuMCk7XG4gICAgICAgIGQucHVzaChNYXRoLnJhbmRvbSgpKjI1NS4wKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbFBhcnRpY2xlRGF0YShudW1fcGFydHMsIG1pbl9hZ2UsIG1heF9hZ2Upe1xuICAgIHZhciBkYXRhID0gW107XG4gICAgZm9yKGxldCBpPTA7IGk8bnVtX3BhcnRzOyArK2kpe1xuICAgICAgICAvLyBQb3NpdGlvblxuICAgICAgICAvLyBkYXRhLnB1c2goMC4wLCAwLjApO1xuICAgICAgICBkYXRhLnB1c2goTWF0aC5yYW5kb20oKSwgTWF0aC5yYW5kb20oKSk7XG5cbiAgICAgICAgLy8gTGlmZVxuICAgICAgICBsZXQgbGlmZSA9IG1pbl9hZ2UgKyBNYXRoLnJhbmRvbSgpICogKG1heF9hZ2UgLSBtaW5fYWdlKTtcbiAgICAgICAgZGF0YS5wdXNoKGxpZmUrMSwgbGlmZSk7XG5cbiAgICAgICAgLy8gVmVsb2NpdHlcbiAgICAgICAgZGF0YS5wdXNoKDAuMCwgMC4wKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFBhcnRpY2xlQnVmZmVyVkFPKGdsLCBidWZmZXJzLCB2YW8pe1xuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh2YW8pO1xuICAgIGZvcihsZXQgaT0wOyBpPGJ1ZmZlcnMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBidWZmZXIgPSBidWZmZXJzW2ldO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyLmJ1ZmZlcl9vYmplY3QpO1xuXG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuXG4gICAgICAgIGZvcihjb25zdCBhdHRyaWJfbmFtZSBpbiBidWZmZXIuYXR0cmlicyl7XG4gICAgICAgICAgICBpZihidWZmZXIuYXR0cmlicy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJfbmFtZSkpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYl9kZXNjID0gYnVmZmVyLmF0dHJpYnNbYXR0cmliX25hbWVdO1xuICAgICAgICAgICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYl9kZXNjLmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJfZGVzYy5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYXR0cmliX2Rlc2MubnVtX2NvbXBvbmVudHMsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYl9kZXNjLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBidWZmZXIuc3RyaWRlLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZV9zaXplID0gNDtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gYXR0cmliX2Rlc2MubnVtX2NvbXBvbmVudHMgKiB0eXBlX3NpemU7XG4gICAgICAgICAgICAgICAgaWYoYXR0cmliX2Rlc2MuaGFzT3duUHJvcGVydHkoXCJkaXZpc29yXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliRGl2aXNvcihhdHRyaWJfZGVzYy5sb2NhdGlvbiwgYXR0cmliX2Rlc2MuZGl2aXNvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGdsLCBwcm9ncmFtT25lLCBwcm9ncmFtVHdvLCBmb3JjZV9maWVsZF9pbWFnZSwgbnVtX3BhcnRpY2xlcywgcGFydGljbGVfYmlydGhfcmF0ZSwgbWluX2FnZSwgbWF4X2FnZSxcbiAgICBtaW5fdGhldGEsIG1heF90aGV0YSwgbWluX3NwZWVkLCBtYXhfc3BlZWQsIGdyYXZpdHkpe1xuICAgIGlmKG1heF9hZ2UgPCBtaW5fYWdlKSB0aHJvdyBcIkludmFsaWQgYWdlIHJhbmdlXCI7XG4gICAgaWYgKG1heF90aGV0YSA8IG1pbl90aGV0YSB8fCBtaW5fdGhldGEgPCAtTWF0aC5QSSB8fCBtYXhfdGhldGEgPiBNYXRoLlBJKSB0aHJvdyBcIkludmFsaWQgdGhldGEgcmFuZ2UuXCI7XG5cbiAgICBjb25zdCB1cGRhdGVfcHJvZ3JhbSA9IGluaXRTaGFkZXJQcm9ncmFtKGdsLCBwcm9ncmFtT25lWzBdLCBwcm9ncmFtT25lWzFdLFxuICAgICAgICBbXG4gICAgICAgICAgICBcInZfUG9zaXRpb25cIixcbiAgICAgICAgICAgIFwidl9BZ2VcIixcbiAgICAgICAgICAgIFwidl9MaWZlXCIsXG4gICAgICAgICAgICBcInZfVmVsb2NpdHlcIixcbiAgICAgICAgXSk7XG4gICAgY29uc3QgcmVuZGVyX3Byb2dyYW0gPSBpbml0U2hhZGVyUHJvZ3JhbShnbCwgcHJvZ3JhbVR3b1swXSwgcHJvZ3JhbVR3b1sxXSwgbnVsbCk7XG5cblxuICAgIGNvbnN0IHVwZGF0ZV9hdHRyaWJfbG9jYXRpb25zID0ge1xuICAgICAgICBpX1Bvc2l0aW9uOiB7XG4gICAgICAgICAgICBsb2NhdGlvbjogZ2wuZ2V0QXR0cmliTG9jYXRpb24odXBkYXRlX3Byb2dyYW0sIFwiaV9Qb3NpdGlvblwiKSxcbiAgICAgICAgICAgIG51bV9jb21wb25lbnRzOiAyLFxuICAgICAgICAgICAgdHlwZTogZ2wuRkxPQVRcbiAgICAgICAgfSxcbiAgICAgICAgaV9BZ2U6IHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBnbC5nZXRBdHRyaWJMb2NhdGlvbih1cGRhdGVfcHJvZ3JhbSwgXCJpX0FnZVwiKSxcbiAgICAgICAgICAgIG51bV9jb21wb25lbnRzOiAxLFxuICAgICAgICAgICAgdHlwZTogZ2wuRkxPQVRcbiAgICAgICAgfSxcbiAgICAgICAgaV9MaWZlOiB7XG4gICAgICAgICAgICBsb2NhdGlvbjogZ2wuZ2V0QXR0cmliTG9jYXRpb24odXBkYXRlX3Byb2dyYW0sIFwiaV9MaWZlXCIpLFxuICAgICAgICAgICAgbnVtX2NvbXBvbmVudHM6IDEsXG4gICAgICAgICAgICB0eXBlOiBnbC5GTE9BVFxuICAgICAgICB9LFxuICAgICAgICBpX1ZlbG9jaXR5OiB7XG4gICAgICAgICAgICBsb2NhdGlvbjogZ2wuZ2V0QXR0cmliTG9jYXRpb24odXBkYXRlX3Byb2dyYW0sIFwiaV9WZWxvY2l0eVwiKSxcbiAgICAgICAgICAgIG51bV9jb21wb25lbnRzOiAyLFxuICAgICAgICAgICAgdHlwZTogZ2wuRkxPQVRcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVuZGVyX2F0dHJpYl9sb2NhdGlvbnMgPSB7XG4gICAgICAgIGlfUG9zaXRpb246IHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBnbC5nZXRBdHRyaWJMb2NhdGlvbihyZW5kZXJfcHJvZ3JhbSwgXCJpX1Bvc2l0aW9uXCIpLFxuICAgICAgICAgICAgbnVtX2NvbXBvbmVudHM6IDIsXG4gICAgICAgICAgICB0eXBlOiBnbC5GTE9BVFxuICAgICAgICB9LFxuICAgICAgICBpX0FnZToge1xuICAgICAgICAgICAgbG9jYXRpb246IGdsLmdldEF0dHJpYkxvY2F0aW9uKHJlbmRlcl9wcm9ncmFtLCBcImlfQWdlXCIpLFxuICAgICAgICAgICAgbnVtX2NvbXBvbmVudHM6IDEsXG4gICAgICAgICAgICB0eXBlOiBnbC5GTE9BVFxuICAgICAgICB9LFxuICAgICAgICBpX0xpZmU6IHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBnbC5nZXRBdHRyaWJMb2NhdGlvbihyZW5kZXJfcHJvZ3JhbSwgXCJpX0xpZmVcIiksXG4gICAgICAgICAgICBudW1fY29tcG9uZW50czogMSxcbiAgICAgICAgICAgIHR5cGU6IGdsLkZMT0FUXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIC8qIFRoZXNlIGJ1ZmZlcnMgc2hhbGwgY29udGFpbiBkYXRhIGFib3V0IHBhcnRpY2xlcy4gKi9cbiAgICBjb25zdCBidWZmZXJzID0gW1xuICAgICAgICBnbC5jcmVhdGVCdWZmZXIoKSxcbiAgICAgICAgZ2wuY3JlYXRlQnVmZmVyKCksXG4gICAgXTtcbiAgICAvKiBXZSdsbCBoYXZlIDQgVkFPcy4uLiAqL1xuICAgIGNvbnN0IHZhb3MgPSBbXG4gICAgICAgIGdsLmNyZWF0ZVZlcnRleEFycmF5KCksIC8qIGZvciB1cGRhdGluZyBidWZmZXIgMSAqL1xuICAgICAgICBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpLCAvKiBmb3IgdXBkYXRpbmcgYnVmZmVyIDIgKi9cbiAgICAgICAgZ2wuY3JlYXRlVmVydGV4QXJyYXkoKSwgLyogZm9yIHJlbmRlcmluZyBidWZmZXIgMSAqL1xuICAgICAgICBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpIC8qIGZvciByZW5kZXJpbmcgYnVmZmVyIDIgKi9cbiAgICBdO1xuXG4gICAgY29uc3QgdmFvX2Rlc2MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbzogdmFvc1swXSxcbiAgICAgICAgICAgIGJ1ZmZlcnM6IFt7XG4gICAgICAgICAgICAgICAgYnVmZmVyX29iamVjdDogYnVmZmVyc1swXSxcbiAgICAgICAgICAgICAgICBzdHJpZGU6IDQgKiA2LFxuICAgICAgICAgICAgICAgIGF0dHJpYnM6IHVwZGF0ZV9hdHRyaWJfbG9jYXRpb25zXG4gICAgICAgICAgICB9XVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB2YW86IHZhb3NbMV0sXG4gICAgICAgICAgICBidWZmZXJzOiBbe1xuICAgICAgICAgICAgICAgIGJ1ZmZlcl9vYmplY3Q6IGJ1ZmZlcnNbMV0sXG4gICAgICAgICAgICAgICAgc3RyaWRlOiA0ICogNixcbiAgICAgICAgICAgICAgICBhdHRyaWJzOiB1cGRhdGVfYXR0cmliX2xvY2F0aW9uc1xuICAgICAgICAgICAgfV1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFvOiB2YW9zWzJdLFxuICAgICAgICAgICAgYnVmZmVyczogW3tcbiAgICAgICAgICAgICAgICBidWZmZXJfb2JqZWN0OiBidWZmZXJzWzBdLFxuICAgICAgICAgICAgICAgIHN0cmlkZTogNCAqIDYsXG4gICAgICAgICAgICAgICAgYXR0cmliczogcmVuZGVyX2F0dHJpYl9sb2NhdGlvbnNcbiAgICAgICAgICAgIH1dLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB2YW86IHZhb3NbM10sXG4gICAgICAgICAgICBidWZmZXJzOiBbe1xuICAgICAgICAgICAgICAgIGJ1ZmZlcl9vYmplY3Q6IGJ1ZmZlcnNbMV0sXG4gICAgICAgICAgICAgICAgc3RyaWRlOiA0ICogNixcbiAgICAgICAgICAgICAgICBhdHRyaWJzOiByZW5kZXJfYXR0cmliX2xvY2F0aW9uc1xuICAgICAgICAgICAgfV0sXG4gICAgICAgIH0sXG4gICAgXTtcbiAgICBjb25zdCBpbml0aWFsX2RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGluaXRpYWxQYXJ0aWNsZURhdGEobnVtX3BhcnRpY2xlcywgbWluX2FnZSwgbWF4X2FnZSkpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJzWzBdKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgaW5pdGlhbF9kYXRhLCBnbC5TVFJFQU1fRFJBVyk7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcnNbMV0pO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBpbml0aWFsX2RhdGEsIGdsLlNUUkVBTV9EUkFXKTtcblxuICAgIC8qIFNldCB1cCBWQU9zICovXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YW9fZGVzYy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXR1cFBhcnRpY2xlQnVmZmVyVkFPKGdsLCB2YW9fZGVzY1tpXS5idWZmZXJzLCB2YW9fZGVzY1tpXS52YW8pO1xuICAgIH1cblxuICAgIGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMS4wKTtcblxuICAgIC8qIENyZWF0ZSBhIHRleHR1cmUgZm9yIHJhbmRvbSB2YWx1ZXMuICovXG4gICAgY29uc3Qgcmdfbm9pc2VfdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCByZ19ub2lzZV90ZXh0dXJlKTtcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIDAsXG4gICAgICAgIGdsLlJHOCxcbiAgICAgICAgNTEyLCA1MTIsXG4gICAgICAgIDAsXG4gICAgICAgIGdsLlJHLFxuICAgICAgICBnbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICByYW5kb21SR0RhdGEoNTEyLCA1MTIpKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5NSVJST1JFRF9SRVBFQVQpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLk1JUlJPUkVEX1JFUEVBVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcblxuICAgIGNvbnN0IGZvcmNlX2ZpZWxkX3RleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgZm9yY2VfZmllbGRfdGV4dHVyZSk7XG4gICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0I4LCBnbC5SR0IsIGdsLlVOU0lHTkVEX0JZVEUsIGZvcmNlX2ZpZWxkX2ltYWdlKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5SRVBFQVQpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLlJFUEVBVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuXG4gICAgLyogU2V0IHVwIGJsZW5kaW5nICovXG4gICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHBhcnRpY2xlX3N5c19idWZmZXJzOiBidWZmZXJzLFxuICAgICAgICBwYXJ0aWNsZV9zeXNfdmFvczogdmFvcyxcbiAgICAgICAgcmVhZDogMCxcbiAgICAgICAgd3JpdGU6IDEsXG4gICAgICAgIHBhcnRpY2xlX3VwZGF0ZV9wcm9ncmFtOiB1cGRhdGVfcHJvZ3JhbSxcbiAgICAgICAgcGFydGljbGVfcmVuZGVyX3Byb2dyYW06IHJlbmRlcl9wcm9ncmFtLFxuICAgICAgICBudW1fcGFydGljbGVzOiBpbml0aWFsX2RhdGEubGVuZ3RoIC8gNixcbiAgICAgICAgb2xkX3RpbWVzdGFtcDogMC4wLFxuICAgICAgICByZ19ub2lzZTogcmdfbm9pc2VfdGV4dHVyZSxcbiAgICAgICAgdG90YWxfdGltZTogMC4wLFxuICAgICAgICBib3JuX3BhcnRpY2xlczogMCxcbiAgICAgICAgYmlydGhfcmF0ZTogcGFydGljbGVfYmlydGhfcmF0ZSxcbiAgICAgICAgZ3Jhdml0eTogZ3Jhdml0eSxcbiAgICAgICAgb3JpZ2luOiBbMC4wLCAwLjBdLFxuICAgICAgICBtaW5fdGhldGE6IG1pbl90aGV0YSxcbiAgICAgICAgbWF4X3RoZXRhOiBtYXhfdGhldGEsXG4gICAgICAgIG1pbl9zcGVlZDogbWluX3NwZWVkLFxuICAgICAgICBtYXhfc3BlZWQ6IG1heF9zcGVlZCxcbiAgICAgICAgZm9yY2VfZmllbGQ6IGZvcmNlX2ZpZWxkX3RleHR1cmUsXG4gICAgfTtcbn1cblxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjYwMDNmMjA2YmNmMDg2YmEwZjVjYmJmYTk2NzE1YzVlLnBuZ1wiOyIsImltcG9ydCB7IGNyZWF0ZUNhbnZhcywgY3JlYXRlT3ZlcmxheSwgaW5pdFNoYWRlclByb2dyYW0sICByYW5kb21SR2RhdGEsIGluaXRpYWxQYXJ0aWNsZURhdGEsIGluaXQsIGdlbmVyYXRlVUlEIH0gZnJvbSBcIi4vc2V0dXBcIjtcbmltcG9ydCBpbyBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcbmltcG9ydCBzb2NrZXRJT0NsaWVudCBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcbmltcG9ydCAnLi9zdHlsZXMuY3NzJztcbmltcG9ydCBGRkltYWdlIGZyb20gJy4vaW1hZ2VzL3JncGVybGluLnBuZyc7XG52YXIgdXBkYXRlVmVydCA9IHJlcXVpcmUoJy4vZ2xzbC9wYXJ0aWNsZV91cGRhdGVfdmVydC5nbHNsJyk7XG52YXIgcGFzc1RocnVGcmFnID0gcmVxdWlyZSgnLi9nbHNsL3Bhc3N0aHJ1X2ZyYWcuZ2xzbCcpO1xudmFyIHJlbmRlckZyYWcgPSByZXF1aXJlKCcuL2dsc2wvcGFydGljbGVfcmVuZGVyX2ZyYWcuZ2xzbCcpO1xudmFyIHJlbmRlclZlcnQgPSByZXF1aXJlKCcuL2dsc2wvcGFydGljbGVfcmVuZGVyX3ZlcnQuZ2xzbCcpO1xuXG52YXIgcGFydGljbGVTeXN0ZW1zID0ge307XG52YXIgc29ja2V0ID0gaW8oKTtcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgdmFyIFtjYW52YXMsIGdsXSA9IGNyZWF0ZUNhbnZhcyh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICB2YXIgZm9yY2VfZmllbGRfaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBmb3JjZV9maWVsZF9pbWFnZS5zcmMgPSBGRkltYWdlO1xuXG4gICAgY29uc3QgVUlEID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1VJRCcpID8gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1VJRCcpIDogZ2VuZXJhdGVVSUQoKTtcbiAgICAvLyBjb25zdCBVSUQgPSBnZW5lcmF0ZVVJRCgpO1xuICAgIC8vIGluaXRVc2VyU29ja2V0KFVJRCk7XG5cbiAgICBmb3JjZV9maWVsZF9pbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdXNlclN5c3RlbSA9IGdlbmVyYXRlUGFydGljbGVTeXN0ZW0oZ2wsIGZvcmNlX2ZpZWxkX2ltYWdlKTtcblxuICAgICAgICBwYXJ0aWNsZVN5c3RlbXNbVUlEXSA9IHVzZXJTeXN0ZW07XG5cbiAgICAgICAgLyogTWFrZXMgdGhlIHBhcnRpY2xlIHN5c3RlbSBmb2xsb3cgdGhlIG1vdXNlIHBvaW50ZXIgKi9cbiAgICAgICAgY2FudmFzLm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IDIuMCAqIChlLnBhZ2VYIC0gdGhpcy5vZmZzZXRMZWZ0KS90aGlzLndpZHRoIC0gMS4wO1xuICAgICAgICAgICAgY29uc3QgeSA9IC0oMi4wICogKGUucGFnZVkgLSB0aGlzLm9mZnNldFRvcCkvdGhpcy5oZWlnaHQgLSAxLjApO1xuICAgICAgICAgICAgcGFydGljbGVTeXN0ZW1zW1VJRF0ub3JpZ2luID0gW3gsIHldO1xuICAgICAgICAgICAgc29ja2V0LmVtaXQoJ3VwZGF0ZVBhcnRpY2xlU3lzdGVtJywge1xuICAgICAgICAgICAgICAgIHVpZDogVUlELFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBbeCx5XSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXcobm93KSB7XG4gICAgICAgICAgICBzb2NrZXQub24oJ3VwZGF0ZVVzZXJzTGlzdCcsIGZ1bmN0aW9uKHVzZXJzKSB7XG4gICAgICAgICAgICAgICAgZm9yKGNvbnN0IHVzZXIgb2YgdXNlcnMpe1xuICAgICAgICAgICAgICAgICAgICBpZighcGFydGljbGVTeXN0ZW1zLmhhc093blByb3BlcnR5KHVzZXIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldyBVc2VyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbXNbdXNlcl0gPSBnZW5lcmF0ZVBhcnRpY2xlU3lzdGVtKGdsLCBmb3JjZV9maWVsZF9pbWFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKGNvbnN0IHVpZCBpbiBwYXJ0aWNsZVN5c3RlbXMpe1xuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgVXNlclxuICAgICAgICAgICAgICAgICAgICBpZih1c2Vycy5pbmRleE9mKHVpZCkgPT09IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbG9uZSA9IE9iamVjdC5hc3NpZ24oe30sIHBhcnRpY2xlU3lzdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2xvbmVbdWlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlU3lzdGVtcyA9IGNsb25lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzb2NrZXQub24oJ25ld0xvY2F0aW9ucycsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZihkYXRhLnVpZCAhPT0gVUlEICYmIHBhcnRpY2xlU3lzdGVtcy5oYXNPd25Qcm9wZXJ0eShkYXRhLnVpZCkpe1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbXNbZGF0YS51aWRdLm9yaWdpbiA9IGRhdGEubG9jYXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZW5kZXIoZ2wsIHBhcnRpY2xlU3lzdGVtcywgbm93KTtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcbiAgICB9XG59O1xuXG5cbmZ1bmN0aW9uIHJlbmRlcihnbCwgcGFydGljbGVTeXN0ZW1zLCB0aW1lc3RhbXBfbWlsbGlzKSB7XG4gICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuICAgIGZvcihsZXQgcHMgaW4gcGFydGljbGVTeXN0ZW1zKXtcbiAgICAgICAgY29uc3QgcGFydGljbGVTeXN0ZW0gPSBwYXJ0aWNsZVN5c3RlbXNbcHNdO1xuICAgICAgICB2YXIgbnVtX3BhcnQgPSBwYXJ0aWNsZVN5c3RlbS5ib3JuX3BhcnRpY2xlcztcblxuICAgICAgICAvKiBDYWxjdWxhdGUgdGltZSBkZWx0YS4gKi9cbiAgICAgICAgdmFyIHRpbWVfZGVsdGEgPSAwLjA7XG4gICAgICAgIGlmIChwYXJ0aWNsZVN5c3RlbS5vbGRfdGltZXN0YW1wICE9IDApIHtcbiAgICAgICAgICAgIHRpbWVfZGVsdGEgPSB0aW1lc3RhbXBfbWlsbGlzIC0gcGFydGljbGVTeXN0ZW0ub2xkX3RpbWVzdGFtcDtcbiAgICAgICAgICAgIGlmICh0aW1lX2RlbHRhID4gNTAwLjApIHtcbiAgICAgICAgICAgICAgICAvKiBJZiBkZWx0YSBpcyB0b28gaGlnaCwgcHJldGVuZCBub3RoaW5nIGhhcHBlbmVkLlxuICAgICAgICAgICAgICAgICAqICAgICAgICAgIFByb2JhYmx5IHRhYiB3YXMgaW4gYmFja2dyb3VuZCBvciBzb21ldGhpbmcuICovXG4gICAgICAgICAgICAgICAgdGltZV9kZWx0YSA9IDAuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIEhlcmUncyB3aGVyZSBiaXJ0aCByYXRlIHBhcmFtZXRlciBjb21lcyBpbnRvIHBsYXkuXG4gICAgICAgICAqICAgICAgV2UgYWRkIHRvIHRoZSBudW1iZXIgb2YgYWN0aXZlIHBhcnRpY2xlcyBpbiB0aGUgc3lzdGVtXG4gICAgICAgICAqICAgICAgICAgICBiYXNlZCBvbiBiaXJ0aCByYXRlIGFuZCBlbGFwc2VkIHRpbWUuICovXG4gICAgICAgIGlmIChwYXJ0aWNsZVN5c3RlbS5ib3JuX3BhcnRpY2xlcyA8IHBhcnRpY2xlU3lzdGVtLm51bV9wYXJ0aWNsZXMpIHtcbiAgICAgICAgICAgIHBhcnRpY2xlU3lzdGVtLmJvcm5fcGFydGljbGVzID0gTWF0aC5taW4ocGFydGljbGVTeXN0ZW0ubnVtX3BhcnRpY2xlcyxcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKHBhcnRpY2xlU3lzdGVtLmJvcm5fcGFydGljbGVzICsgcGFydGljbGVTeXN0ZW0uYmlydGhfcmF0ZSAqIHRpbWVfZGVsdGEpKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBTZXQgdGhlIHByZXZpb3VzIHVwZGF0ZSB0aW1lc3RhbXAgZm9yIGNhbGN1bGF0aW5nIHRpbWUgZGVsdGEgaW4gdGhlXG4gICAgICAgICAqICAgICAgbmV4dCBmcmFtZS4gKi9cbiAgICAgICAgcGFydGljbGVTeXN0ZW0ub2xkX3RpbWVzdGFtcCA9IHRpbWVzdGFtcF9taWxsaXM7XG5cbiAgICAgICAgZ2wudXNlUHJvZ3JhbShwYXJ0aWNsZVN5c3RlbS5wYXJ0aWNsZV91cGRhdGVfcHJvZ3JhbSk7XG5cbiAgICAgICAgLyogTW9zdCBvZiB0aGUgZm9sbG93aW5nIGlzIHRyaXZpYWwgc2V0dGluZyBvZiB1bmlmb3JtcyAqL1xuICAgICAgICBnbC51bmlmb3JtMWYoXG4gICAgICAgICAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocGFydGljbGVTeXN0ZW0ucGFydGljbGVfdXBkYXRlX3Byb2dyYW0sIFwidV9UaW1lRGVsdGFcIiksXG4gICAgICAgICAgICB0aW1lX2RlbHRhIC8gMTAwMC4wKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKFxuICAgICAgICAgICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHBhcnRpY2xlU3lzdGVtLnBhcnRpY2xlX3VwZGF0ZV9wcm9ncmFtLCBcInVfVGltZVwiKSxcbiAgICAgICAgICAgIHBhcnRpY2xlU3lzdGVtLnRvdGFsX3RpbWUgLyAxMDAwLjApO1xuICAgICAgICBnbC51bmlmb3JtMWYoXG4gICAgICAgICAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocGFydGljbGVTeXN0ZW0ucGFydGljbGVfdXBkYXRlX3Byb2dyYW0sIFwidV9Ub3RhbFRpbWVcIiksXG4gICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbS50b3RhbF90aW1lKTtcbiAgICAgICAgZ2wudW5pZm9ybTJmKFxuICAgICAgICAgICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHBhcnRpY2xlU3lzdGVtLnBhcnRpY2xlX3VwZGF0ZV9wcm9ncmFtLCBcInVfR3Jhdml0eVwiKSxcbiAgICAgICAgICAgIHBhcnRpY2xlU3lzdGVtLmdyYXZpdHlbMF0sIHBhcnRpY2xlU3lzdGVtLmdyYXZpdHlbMV0pO1xuXG4gICAgICAgIC8vIFBBUlRJQ0xFIFNZU1RFTSBTUEVDSUZJQyBVTklGT1JNUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBnbC51bmlmb3JtMmYoXG4gICAgICAgICAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocGFydGljbGVTeXN0ZW0ucGFydGljbGVfdXBkYXRlX3Byb2dyYW0sIFwidV9PcmlnaW5cIiksXG4gICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbS5vcmlnaW5bMF0sXG4gICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbS5vcmlnaW5bMV0pO1xuICAgICAgICBnbC51bmlmb3JtMWYoXG4gICAgICAgICAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocGFydGljbGVTeXN0ZW0ucGFydGljbGVfdXBkYXRlX3Byb2dyYW0sIFwidV9NaW5UaGV0YVwiKSxcbiAgICAgICAgICAgIHBhcnRpY2xlU3lzdGVtLm1pbl90aGV0YSk7XG4gICAgICAgIGdsLnVuaWZvcm0xZihcbiAgICAgICAgICAgIGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwYXJ0aWNsZVN5c3RlbS5wYXJ0aWNsZV91cGRhdGVfcHJvZ3JhbSwgXCJ1X01heFRoZXRhXCIpLFxuICAgICAgICAgICAgcGFydGljbGVTeXN0ZW0ubWF4X3RoZXRhKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKFxuICAgICAgICAgICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHBhcnRpY2xlU3lzdGVtLnBhcnRpY2xlX3VwZGF0ZV9wcm9ncmFtLCBcInVfTWluU3BlZWRcIiksXG4gICAgICAgICAgICBwYXJ0aWNsZVN5c3RlbS5taW5fc3BlZWQpO1xuICAgICAgICBnbC51bmlmb3JtMWYoXG4gICAgICAgICAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocGFydGljbGVTeXN0ZW0ucGFydGljbGVfdXBkYXRlX3Byb2dyYW0sIFwidV9NYXhTcGVlZFwiKSxcbiAgICAgICAgICAgIHBhcnRpY2xlU3lzdGVtLm1heF9zcGVlZCk7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIHBhcnRpY2xlU3lzdGVtLnRvdGFsX3RpbWUgKz0gdGltZV9kZWx0YTtcbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHBhcnRpY2xlU3lzdGVtLnJnX25vaXNlKTtcbiAgICAgICAgZ2wudW5pZm9ybTFpKFxuICAgICAgICAgICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHBhcnRpY2xlU3lzdGVtLnBhcnRpY2xlX3VwZGF0ZV9wcm9ncmFtLCBcInVfUmdOb2lzZVwiKSxcbiAgICAgICAgICAgIDApO1xuICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUxKTtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgcGFydGljbGVTeXN0ZW0uZm9yY2VfZmllbGQpO1xuICAgICAgICBnbC51bmlmb3JtMWkoXG4gICAgICAgICAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocGFydGljbGVTeXN0ZW0ucGFydGljbGVfdXBkYXRlX3Byb2dyYW0sIFwidV9Gb3JjZUZpZWxkXCIpLFxuICAgICAgICAgICAgMSk7XG5cblxuICAgICAgICAvKiBCaW5kIHRoZSBcInJlYWRcIiBidWZmZXIgLSBpdCBjb250YWlucyB0aGUgcGFydGljbGVTeXN0ZW0gb2YgdGhlIHBhcnRpY2xlIHN5c3RlbVxuICAgICAgICAgKiAgICAgXCJhcyBvZiBub3dcIi4qL1xuICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkocGFydGljbGVTeXN0ZW0ucGFydGljbGVfc3lzX3Zhb3NbcGFydGljbGVTeXN0ZW0ucmVhZF0pO1xuXG4gICAgICAgIC8qIEJpbmQgdGhlIFwid3JpdGVcIiBidWZmZXIgYXMgdHJhbnNmb3JtIGZlZWRiYWNrIC0gdGhlIHZhcnlpbmdzIG9mIHRoZVxuICAgICAgICAgKiAgICAgIHVwZGF0ZSBzaGFkZXIgd2lsbCBiZSB3cml0dGVuIGhlcmUuICovXG4gICAgICAgIGdsLmJpbmRCdWZmZXJCYXNlKFxuICAgICAgICAgICAgZ2wuVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUiwgMCwgcGFydGljbGVTeXN0ZW0ucGFydGljbGVfc3lzX2J1ZmZlcnNbcGFydGljbGVTeXN0ZW0ud3JpdGVdKTtcblxuICAgICAgICAvKiBTaW5jZSB3ZSdyZSBub3QgYWN0dWFsbHkgcmVuZGVyaW5nIGFueXRoaW5nIHdoZW4gdXBkYXRpbmcgdGhlIHBhcnRpY2xlXG4gICAgICAgICAqICAgICAgcGFydGljbGVTeXN0ZW0sIGRpc2FibGUgcmFzdGVyaXphdGlvbi4qL1xuICAgICAgICBnbC5lbmFibGUoZ2wuUkFTVEVSSVpFUl9ESVNDQVJEKTtcblxuICAgICAgICAvKiBCZWdpbiB0cmFuc2Zvcm0gZmVlZGJhY2shICovXG4gICAgICAgIGdsLmJlZ2luVHJhbnNmb3JtRmVlZGJhY2soZ2wuUE9JTlRTKTtcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIG51bV9wYXJ0KTtcbiAgICAgICAgZ2wuZW5kVHJhbnNmb3JtRmVlZGJhY2soKTtcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5SQVNURVJJWkVSX0RJU0NBUkQpO1xuICAgICAgICAvKiBEb24ndCBmb3JnZXQgdG8gdW5iaW5kIHRoZSB0cmFuc2Zvcm0gZmVlZGJhY2sgYnVmZmVyISAqL1xuICAgICAgICBnbC5iaW5kQnVmZmVyQmFzZShnbC5UUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSLCAwLCBudWxsKTtcblxuICAgICAgICAvKiBOb3csIHdlIGRyYXcgdGhlIHBhcnRpY2xlIHN5c3RlbS4gTm90ZSB0aGF0IHdlJ3JlIGFjdHVhbGx5XG4gICAgICAgICAqICAgICAgZHJhd2luZyB0aGUgZGF0YSBmcm9tIHRoZSBcInJlYWRcIiBidWZmZXIsIG5vdCB0aGUgXCJ3cml0ZVwiIGJ1ZmZlclxuICAgICAgICAgKiAgICAgICAgICAgdGhhdCB3ZSd2ZSB3cml0dGVuIHRoZSB1cGRhdGVkIGRhdGEgdG8uICovXG4gICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShwYXJ0aWNsZVN5c3RlbS5wYXJ0aWNsZV9zeXNfdmFvc1twYXJ0aWNsZVN5c3RlbS5yZWFkICsgMl0pO1xuICAgICAgICBnbC51c2VQcm9ncmFtKHBhcnRpY2xlU3lzdGVtLnBhcnRpY2xlX3JlbmRlcl9wcm9ncmFtKTtcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIG51bV9wYXJ0KTtcblxuICAgICAgICAvKiBGaW5hbGx5LCB3ZSBzd2FwIHJlYWQgYW5kIHdyaXRlIGJ1ZmZlcnMuIFRoZSB1cGRhdGVkIHBhcnRpY2xlU3lzdGVtIHdpbGwgYmVcbiAgICAgICAgICogICAgICByZW5kZXJlZCBvbiB0aGUgbmV4dCBmcmFtZS4gKi9cbiAgICAgICAgdmFyIHRtcCA9IHBhcnRpY2xlU3lzdGVtLnJlYWQ7XG4gICAgICAgIHBhcnRpY2xlU3lzdGVtLnJlYWQgPSBwYXJ0aWNsZVN5c3RlbS53cml0ZTtcbiAgICAgICAgcGFydGljbGVTeXN0ZW0ud3JpdGUgPSB0bXA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0VXNlclNvY2tldChVSUQpe1xuICAgIGlmKFVJRCA9PT0gJycpe1xuICAgICAgICB0aHJvdyAnVXNlciBJRCBFcnJvciEnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvY2tldCA9IHNvY2tldElPQ2xpZW50KCd3czovL2xvY2FsaG9zdDo4OTg5Jywge1xuICAgICAgICAgICAgcXVlcnkgOiAndWlkPScrVUlEXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXJ0aWNsZVN5c3RlbShnbCwgZm9yY2VfZmllbGRfaW1hZ2Upe1xuICAgIHJldHVybiBpbml0KFxuICAgICAgICBnbCxcbiAgICAgICAgW3VwZGF0ZVZlcnQsIHBhc3NUaHJ1RnJhZ10sXG4gICAgICAgIFtyZW5kZXJWZXJ0LCByZW5kZXJGcmFnXSxcbiAgICAgICAgZm9yY2VfZmllbGRfaW1hZ2UsXG4gICAgICAgIDEwMDAsIC8qIG51bWJlciBvZiBwYXJ0aWNsZXMgKi9cbiAgICAgICAgMC41LCAvKiBiaXJ0aCByYXRlICovXG4gICAgICAgIDEuMDEsIDEuNDUsIC8qIGxpZmUgcmFuZ2UgKi9cbiAgICAgICAgLy8gTWF0aC5QSS8yLjAgLSAwLjUsIE1hdGguUEkvMi4wICsgMC41LFxuICAgICAgICAtTWF0aC5QSSwgTWF0aC5QSSxcbiAgICAgICAgLTAuMywgMC4zLCAvKiBzcGVlZCByYW5nZSAqL1xuICAgICAgICBbMC4wLCAwLjBdXG4gICAgKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=